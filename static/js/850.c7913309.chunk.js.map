{"version":3,"file":"static/js/850.c7913309.chunk.js","mappings":"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","sources":["components/StaffVisitHistory.js"],"sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport {\n  Box, Typography, Card, CardContent, Grid, Avatar, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TablePagination, Chip, Button, LinearProgress, Tooltip, useTheme, Snackbar, Alert, IconButton, Skeleton, TextField, InputAdornment\n} from '@mui/material';\nimport {\n  ArrowBack as ArrowBackIcon,\n  Assessment as AssessmentIcon,\n  PeopleAlt as PeopleIcon,\n  StorefrontOutlined as StoreIcon,\n  InventoryOutlined as InventoryIcon,\n  Person as PersonIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n  CalendarToday as CalendarIcon\n} from '@mui/icons-material';\nimport { db } from '../services/firebase';\nimport { doc, getDoc, collection, getDocs } from 'firebase/firestore';\nimport { useAuth } from '../context/AuthContext';\nimport { getSubordinateIds, getSubordinateMarketingStaffIds, canViewStaff } from '../utils/roles';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport { format, isToday } from 'date-fns';\n\n// Import Google Maps components \nimport { GoogleMap, useJsApiLoader, Marker, InfoWindow, Polyline } from '@react-google-maps/api';\n\nfunction getInitials(name) {\n  if (!name) return '?';\n  return name\n    .split(' ')\n    .map(part => part[0])\n    .join('')\n    .toUpperCase()\n    .substring(0, 2);\n}\n\n// Add a helper to parse Firestore Timestamp, Date, or string\nfunction toDateSafe(val) {\n  if (!val) return null;\n  if (val instanceof Date) return val;\n  if (val.toDate) return val.toDate();\n  // Try to parse string (e.g., 'May 2, 2025 at 4:03:58 PM UTC+5:30')\n  const parsed = new Date(val);\n  return isNaN(parsed) ? null : parsed;\n}\n\n// Helper: Recursively collect all subordinate marketing staff IDs under a given staffId\nfunction getAllSubordinateMarketingStaffIds(staffId, allUsers) {\n  let result = [];\n  const directSubs = allUsers.filter(u => u.reportingToId === staffId);\n  for (const sub of directSubs) {\n    if (sub.role === 'MarketingStaff') {\n      result.push(sub.id);\n    } else {\n      result = result.concat(getAllSubordinateMarketingStaffIds(sub.id, allUsers));\n    }\n  }\n  return result;\n}\n\n// Google Maps container styles\nconst mapContainerStyle = {\n  width: '100%',\n  height: '400px',\n  borderRadius: '8px'\n};\n\nconst StaffVisitHistory = () => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { staffId } = useParams();\n  const location = useLocation();\n  const fallbackStaff = location.state || {};\n  const { userProfile, allUsers: authAllUsers, loading: authLoading } = useAuth();\n\n  const [staff, setStaff] = useState(null);\n  const [allUsers, setAllUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [visits, setVisits] = useState([]);\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [subordinateStats, setSubordinateStats] = useState([]);\n  const [staffLoading, setStaffLoading] = useState(true);\n  const [productMap, setProductMap] = useState({});\n  const [retailerMap, setRetailerMap] = useState({});\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const [mapCenter, setMapCenter] = useState({ lat: 20.5937, lng: 78.9629 }); // Default center at India\n  const [mapZoom, setMapZoom] = useState(5);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [expandedRows, setExpandedRows] = useState({});\n\n  // Load Google Maps API\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY // Use environment variable for API key\n  });\n\n  // Filter visits by date\n  const filteredVisits = useMemo(() => {\n    if (!visits || !selectedDate) return visits;\n    \n    return visits.filter(visit => {\n      if (!visit.checkInTime) return false;\n      const visitDate = visit.checkInTime instanceof Date ? visit.checkInTime : new Date(visit.checkInTime);\n      return format(visitDate, 'yyyy-MM-dd') === selectedDate;\n    });\n  }, [visits, selectedDate]);\n\n  // Get map markers from filtered visits\n  const mapMarkers = useMemo(() => {\n    if (!filteredVisits || filteredVisits.length === 0) return [];\n    \n    return filteredVisits\n      .filter(visit => visit.checkInLocation && visit.checkInLocation.latitude && visit.checkInLocation.longitude)\n      .map(visit => ({\n        id: visit.id,\n        position: { lat: visit.checkInLocation.latitude, lng: visit.checkInLocation.longitude },\n        retailerName: retailerMap[visit.retailerId] || 'Unknown Retailer',\n        checkInTime: visit.checkInTime,\n        retailerId: visit.retailerId,\n        products: visit.products || []\n      }))\n      // Sort markers by check-in time to create chronological path\n      .sort((a, b) => {\n        const timeA = a.checkInTime instanceof Date ? a.checkInTime.getTime() : 0;\n        const timeB = b.checkInTime instanceof Date ? b.checkInTime.getTime() : 0;\n        return timeA - timeB;\n      });\n  }, [filteredVisits, retailerMap]);\n\n  // Create path for polyline\n  const mapPath = useMemo(() => {\n    return mapMarkers.map(marker => marker.position);\n  }, [mapMarkers]);\n\n  // Polyline options\n  const polylineOptions = {\n    strokeColor: theme.palette.warning.main,\n    strokeOpacity: 0.8,\n    strokeWeight: 3,\n    geodesic: true\n  };\n\n  // Update map center when markers change\n  useEffect(() => {\n    if (mapMarkers.length > 0) {\n      // Calculate the average center point from all markers\n      const lats = mapMarkers.map(m => m.position.lat);\n      const lngs = mapMarkers.map(m => m.position.lng);\n      \n      const avgLat = lats.reduce((sum, lat) => sum + lat, 0) / lats.length;\n      const avgLng = lngs.reduce((sum, lng) => sum + lng, 0) / lngs.length;\n      \n      setMapCenter({ lat: avgLat, lng: avgLng });\n      \n      // Set appropriate zoom level based on number of markers\n      if (mapMarkers.length === 1) {\n        setMapZoom(15); // Close zoom for single marker\n      } else {\n        // More markers need a wider view\n        setMapZoom(12);\n      }\n    }\n  }, [mapMarkers]);\n\n  // Fetch staff and all users\n  useEffect(() => {\n    setStaffLoading(true);\n    setLoading(true);\n    const fetchData = async () => {\n      try {\n        // Fetch staff\n        const staffDoc = await getDoc(doc(db, 'users', staffId));\n        if (!staffDoc.exists()) {\n          setSnackbar({ open: true, message: 'Staff not found', severity: 'error' });\n          setStaff(null);\n          setStaffLoading(false);\n          setLoading(false);\n          return;\n        }\n        setStaff({ id: staffDoc.id, ...staffDoc.data() });\n        setStaffLoading(false);\n        // Use allUsers from AuthContext\n        setAllUsers(authAllUsers || []);\n      } catch (err) {\n        setSnackbar({ open: true, message: err.message || 'Error loading staff', severity: 'error' });\n        setStaffLoading(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [staffId, userProfile, authAllUsers]);\n\n  // Fetch visits if marketing staff\n  useEffect(() => {\n    if (!staff || staff.role !== 'MarketingStaff') return;\n    setLoading(true);\n    const fetchVisits = async () => {\n      try {\n        const visitIds = staff.visitIds || [];\n        if (!Array.isArray(visitIds) || visitIds.length === 0) {\n          setVisits([]);\n          setLoading(false);\n          return;\n        }\n        const visitDocs = await Promise.all(\n          visitIds.map(id => getDoc(doc(db, 'visits', id)))\n        );\n        const visitsData = visitDocs\n          .filter(docSnap => docSnap.exists())\n          .map(docSnap => {\n            const data = docSnap.data();\n            return {\n              ...data,\n              id: docSnap.id,\n              checkInTime: toDateSafe(data.checkInTime),\n              checkOutTime: toDateSafe(data.checkOutTime),\n            };\n          });\n        setVisits(visitsData);\n      } catch (err) {\n        setSnackbar({ open: true, message: err.message || 'Error loading visits', severity: 'error' });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVisits();\n  }, [staff]);\n\n  // Fetch subordinate stats if not marketing staff\n  useEffect(() => {\n    if (!staff || staff.role === 'MarketingStaff') return;\n    setLoading(true);\n    const fetchSubordinateStats = async () => {\n      try {\n        // Get direct subordinates (fix: use reportingToId)\n        const directSubs = allUsers.filter(u => u.reportingToId === staff.id);\n        // For each, get stats (recursively aggregate for non-marketing staff)\n        const stats = await Promise.all(directSubs.map(async (sub) => {\n          let visitCount = 0;\n          let retailersReached = 0;\n          let cartonsSold = 0;\n          let totalSalesAmount = 0;\n          let marketingStaffIds = [];\n          if (sub.role === 'MarketingStaff') {\n            marketingStaffIds = [sub.id];\n          } else {\n            marketingStaffIds = getAllSubordinateMarketingStaffIds(sub.id, allUsers);\n          }\n          if (marketingStaffIds.length > 0) {\n            // Fetch all visits for all subordinate marketing staff\n            let allVisitIds = [];\n            for (const msId of marketingStaffIds) {\n              const ms = allUsers.find(u => u.id === msId);\n              if (ms && Array.isArray(ms.visitIds)) {\n                allVisitIds = allVisitIds.concat(ms.visitIds);\n              }\n            }\n            if (allVisitIds.length > 0) {\n              const visitDocs = await Promise.all(\n                allVisitIds.map(id => getDoc(doc(db, 'visits', id)))\n              );\n              visitCount = visitDocs.length;\n              retailersReached = new Set(visitDocs.map(v => v.data()?.retailerId)).size;\n              \n              // Calculate both cartons sold and total sales amount\n              visitDocs.forEach(visit => {\n                const visitData = visit.data();\n                const products = visitData?.products || [];\n                \n                products.forEach(product => {\n                  const count = parseInt(product.count) || 0;\n                  cartonsSold += count;\n                  \n                  // Calculate sales amount based on product rate\n                  if (product.rate) {\n                    totalSalesAmount += count * parseFloat(product.rate);\n                  }\n                });\n              });\n            }\n          }\n          return {\n            id: sub.id,\n            name: sub.name,\n            role: sub.role,\n            status: sub.active ? 'Active' : 'Inactive',\n            visitCount,\n            retailersReached,\n            cartonsSold,\n            totalSalesAmount\n          };\n        }));\n        setSubordinateStats(stats);\n      } catch (err) {\n        setSnackbar({ open: true, message: err.message || 'Error loading subordinate stats', severity: 'error' });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSubordinateStats();\n  }, [staff, allUsers]);\n\n  // Fetch all products for name lookup\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const productsCollection = collection(db, 'products');\n        const productSnapshot = await getDocs(productsCollection);\n        const pMap = {};\n        productSnapshot.docs.forEach(doc => {\n          const d = doc.data();\n          pMap[doc.id] = d;\n        });\n        setProductMap(pMap);\n      } catch (error) {\n        setProductMap({});\n      }\n    };\n    fetchProducts();\n  }, []);\n\n  // Fetch all retailers for name lookup\n  useEffect(() => {\n    const fetchRetailers = async () => {\n      try {\n        const retailersCollection = collection(db, 'retailers');\n        const retailerSnapshot = await getDocs(retailersCollection);\n        const rMap = {};\n        retailerSnapshot.docs.forEach(doc => {\n          const d = doc.data();\n          rMap[doc.id] = d.name;\n        });\n        setRetailerMap(rMap);\n      } catch (error) {\n        setRetailerMap({});\n      }\n    };\n    fetchRetailers();\n  }, []);\n\n  // Access control: only allow if user can view this staff\n  const canView = useMemo(() => {\n    if (!userProfile || !staff) return undefined; // undefined means still loading\n    if (userProfile.role === 'Admin') return true;\n    // Use getSubordinateIds to check if staffId is in user's scope\n    const myId = userProfile.id;\n    const allowedIds = getSubordinateIds(myId, allUsers);\n    return staff.id === myId || allowedIds.includes(staff.id);\n  }, [userProfile, staff, allUsers]);\n\n  // Helper to build the hierarchy tree recursively\n  function buildHierarchyTree(staffId, allUsers) {\n    const staff = allUsers.find(u => u.id === staffId);\n    if (!staff) return null;\n    const subordinates = allUsers.filter(u => u.reportingToId === staffId);\n    return {\n      ...staff,\n      subordinates: subordinates.map(sub => buildHierarchyTree(sub.id, allUsers)).filter(Boolean)\n    };\n  }\n\n  // Helper to render the tree nodes\n  function renderTreeNode(node, theme) {\n    if (!node) return null;\n    return (\n      <TreeNode\n        label={\n          <Box sx={{ display: 'flex', alignItems: 'center', bgcolor: theme.palette.warning.light, color: theme.palette.warning.contrastText || '#fff', borderRadius: 2, px: 2, py: 1, boxShadow: 1 }}>\n            <Avatar sx={{ bgcolor: theme.palette.warning.main, color: '#fff', width: 36, height: 36, mr: 1 }}>{getInitials(node.name)}</Avatar>\n            <Box>\n              <Typography variant=\"subtitle2\" fontWeight={600}>{node.name}</Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">{node.role}</Typography>\n            </Box>\n          </Box>\n        }\n      >\n        {Array.isArray(node.subordinates) && node.subordinates.length > 0 && node.subordinates.map(sub => renderTreeNode(sub, theme))}\n      </TreeNode>\n    );\n  }\n  \n  const handleToggleExpand = (visitId) => {\n    setExpandedRows((prev) => ({ ...prev, [visitId]: !prev[visitId] }));\n  };\n  \n  // Handle marker click to show InfoWindow\n  const handleMarkerClick = (marker) => {\n    setSelectedMarker(marker);\n  };\n\n  // Always render the main layout, but handle loading/unauthorized\n  if (authLoading || staffLoading || canView === undefined) {\n    // Show header with fallbackStaff if available, otherwise skeletons\n    return (\n      <Box sx={{ p: 3 }}>\n        <Card sx={{ mb: 4, borderRadius: 2, boxShadow: theme.shadows[2] }}>\n          <CardContent sx={{ p: 3 }}>\n            <Grid container spacing={2}>\n              <Grid item xs={12} md={6}>\n                <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                  {fallbackStaff.name ? (\n                    <>\n                      <Skeleton variant=\"circular\" width={60} height={60} sx={{ mr: 2 }} />\n                      <Box>\n                        <Typography variant=\"h5\" gutterBottom fontWeight=\"bold\">{fallbackStaff.name}</Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">{fallbackStaff.email}</Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">{fallbackStaff.phoneNumber}</Typography>\n                      </Box>\n                    </>\n                  ) : (\n                    <>\n                      <Skeleton variant=\"circular\" width={60} height={60} sx={{ mr: 2 }} />\n                      <Box sx={{ flex: 1 }}>\n                        <Skeleton variant=\"text\" width={180} height={32} sx={{ mb: 1 }} />\n                        <Skeleton variant=\"text\" width={120} height={20} sx={{ mb: 0.5 }} />\n                        <Skeleton variant=\"text\" width={100} height={20} />\n                      </Box>\n                    </>\n                  )}\n                </Box>\n              </Grid>\n              <Grid item xs={12} md={6}>\n                <Box sx={{ display: 'flex', justifyContent: { xs: 'flex-start', md: 'flex-end' }, gap: 3, mt: { xs: 2, md: 0 }, height: '100%', alignItems: 'center' }}>\n                  <Box sx={{ textAlign: { xs: 'left', md: 'center' } }}>\n                    <Skeleton variant=\"text\" width={80} height={36} />\n                    <Skeleton variant=\"text\" width={60} height={20} />\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n          </CardContent>\n        </Card>\n        <Card sx={{ borderRadius: 2, boxShadow: theme.shadows[2] }}>\n          <CardContent sx={{ p: 3 }}>\n            <LinearProgress sx={{ mt: 2, mb: 1, borderRadius: 1 }} />\n          </CardContent>\n        </Card>\n      </Box>\n    );\n  }\n\n  if (canView === false) {\n    return (\n      <Box sx={{ p: 4, textAlign: 'center' }}>\n        <Typography variant=\"h6\" color=\"error\">You are not authorized to view this staff's data.</Typography>\n        <Button variant=\"contained\" onClick={() => navigate(-1)} sx={{ mt: 2 }} startIcon={<ArrowBackIcon />}>Back</Button>\n      </Box>\n    );\n  }\n\n  // Main content (as before)\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header Card: Staff Info */}\n      <Card sx={{ mb: 4, borderRadius: 2, boxShadow: theme.shadows[2] }}>\n        <CardContent sx={{ p: 3 }}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} md={6}>\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                {staffLoading ? (\n                  fallbackStaff.name ? (\n                    <>\n                      <Skeleton variant=\"circular\" width={60} height={60} sx={{ mr: 2 }} />\n                      <Box>\n                        <Typography variant=\"h5\" gutterBottom fontWeight=\"bold\">{fallbackStaff.name}</Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">{fallbackStaff.email}</Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">{fallbackStaff.phoneNumber}</Typography>\n                      </Box>\n                    </>\n                  ) : (\n                    <>\n                      <Skeleton variant=\"circular\" width={60} height={60} sx={{ mr: 2 }} />\n                      <Box sx={{ flex: 1 }}>\n                        <Skeleton variant=\"text\" width={180} height={32} sx={{ mb: 1 }} />\n                        <Skeleton variant=\"text\" width={120} height={20} sx={{ mb: 0.5 }} />\n                        <Skeleton variant=\"text\" width={100} height={20} />\n                      </Box>\n                    </>\n                  )\n                ) : staff ? (\n                  <>\n                    <Avatar sx={{ bgcolor: theme.palette.warning.light, color: theme.palette.warning.contrastText || '#fff', width: 60, height: 60, mr: 2, fontSize: '1.5rem' }}>\n                      <PersonIcon sx={{ fontSize: 30 }} />\n                    </Avatar>\n                    <Box>\n                      <Typography variant=\"h5\" gutterBottom fontWeight=\"bold\">{staff.name}</Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">{staff.email}</Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">{staff.phoneNumber}</Typography>\n                    </Box>\n                  </>\n                ) : null}\n              </Box>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Box sx={{ display: 'flex', justifyContent: { xs: 'flex-start', md: 'flex-end' }, gap: 3, mt: { xs: 2, md: 0 }, height: '100%', alignItems: 'center' }}>\n                <Box sx={{ textAlign: { xs: 'left', md: 'center' } }}>\n                  {staff && staff.role === 'MarketingStaff' ? (\n                    <>\n                    </>\n                  ) : null}\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n\n      {/* Main Content: Visits or Subordinate Stats */}\n      {staff && staff.role === 'MarketingStaff' ? (\n        <>\n          {/* Map Card */}\n          <Card sx={{ borderRadius: 2, boxShadow: theme.shadows[2], mb: 4 }}>\n            <CardContent sx={{ p: 3 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\" fontWeight=\"bold\">\n                  <StoreIcon sx={{ mr: 1, verticalAlign: 'text-bottom' }} />\n                  Visit Locations\n                </Typography>\n                <TextField\n                  label=\"Select Date\"\n                  type=\"date\"\n                  size=\"small\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                  sx={{ minWidth: 180 }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <CalendarIcon color=\"action\" />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Box>\n              \n              {loading ? (\n                <LinearProgress sx={{ mt: 2, mb: 1, borderRadius: 1 }} />\n              ) : mapMarkers.length === 0 ? (\n                <Box sx={{ p: 3, textAlign: 'center', backgroundColor: 'rgba(0,0,0,0.02)' }}>\n                  <Typography variant=\"body1\" color=\"text.secondary\">No location data available for selected date</Typography>\n                </Box>\n              ) : isLoaded ? (\n                <Box sx={{ height: 400, width: '100%', mb: 2 }}>\n                  <GoogleMap\n                    mapContainerStyle={mapContainerStyle}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                    options={{\n                      mapTypeControl: false,\n                      streetViewControl: false,\n                      fullscreenControl: true,\n                    }}\n                  >\n                    {/* Add polyline to connect markers */}\n                    {mapPath.length > 1 && (\n                      <Polyline\n                        path={mapPath}\n                        options={polylineOptions}\n                      />\n                    )}\n                    \n                    {mapMarkers.map((marker, index) => (\n                      <Marker \n                        key={marker.id} \n                        position={marker.position}\n                        onClick={() => handleMarkerClick(marker)}\n                        label={index > 0 ? `${index + 1}` : undefined}\n                      />\n                    ))}\n                    \n                    {selectedMarker && (\n                      <InfoWindow\n                        position={selectedMarker.position}\n                        onCloseClick={() => setSelectedMarker(null)}\n                      >\n                        <Box sx={{ p: 1 }}>\n                          <Typography variant=\"subtitle2\" fontWeight=\"bold\">{selectedMarker.retailerName}</Typography>\n                          <Typography variant=\"body2\">\n                            {selectedMarker.checkInTime instanceof Date \n                              ? format(selectedMarker.checkInTime, 'MMM d, yyyy, h:mm a') \n                              : 'Unknown time'}\n                          </Typography>\n                          {selectedMarker.products.length > 0 && (\n                            <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n                              Products: {selectedMarker.products.length}\n                            </Typography>\n                          )}\n                        </Box>\n                      </InfoWindow>\n                    )}\n                  </GoogleMap>\n                </Box>\n              ) : (\n                <Box sx={{ p: 3, textAlign: 'center', backgroundColor: 'rgba(0,0,0,0.02)' }}>\n                  <Typography variant=\"body1\" color=\"text.secondary\">Loading Google Maps...</Typography>\n                </Box>\n              )}\n              \n              <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 2 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Showing {mapMarkers.length} location{mapMarkers.length !== 1 ? 's' : ''} for {selectedDate ? format(new Date(selectedDate), 'MMMM d, yyyy') : 'today'}\n                </Typography>\n                {mapMarkers.length > 0 && (\n                  <Button \n                    size=\"small\" \n                    variant=\"outlined\"\n                    onClick={() => {\n                      if (mapMarkers.length === 1) {\n                        setMapCenter(mapMarkers[0].position);\n                        setMapZoom(15);\n                      } else if (mapMarkers.length > 1) {\n                        // Recenter to the average position\n                        const lats = mapMarkers.map(m => m.position.lat);\n                        const lngs = mapMarkers.map(m => m.position.lng);\n                        const avgLat = lats.reduce((sum, lat) => sum + lat, 0) / lats.length;\n                        const avgLng = lngs.reduce((sum, lng) => sum + lng, 0) / lngs.length;\n                        setMapCenter({ lat: avgLat, lng: avgLng });\n                        setMapZoom(12);\n                      }\n                    }}\n                    sx={{ borderRadius: '2rem' }}\n                  >\n                    Fit to Markers\n                  </Button>\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n          \n          {/* Visit Records Card */}\n          <Card sx={{ borderRadius: 2, boxShadow: theme.shadows[2] }}>\n            <CardContent sx={{ p: 3 }}>\n              <Box sx={{ mt: 0 }}>\n                <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 2 }}>\n                  <InventoryIcon sx={{ mr: 1, verticalAlign: 'text-bottom' }} />\n                  Visit Records\n                </Typography>\n                {loading ? (\n                  <LinearProgress sx={{ mt: 2, mb: 1, borderRadius: 1 }} />\n                ) : filteredVisits.length === 0 ? (\n                  <Box sx={{ p: 3, textAlign: 'center', backgroundColor: 'rgba(0,0,0,0.02)' }}>\n                    <Typography variant=\"body1\" color=\"text.secondary\">No visit data available for selected date</Typography>\n                  </Box>\n                ) : (\n                  <TableContainer>\n                    <Table>\n                      <TableHead>\n                        <TableRow>\n                          <TableCell sx={{ fontWeight: 'bold' }}>Check-in</TableCell>\n                          <TableCell sx={{ fontWeight: 'bold' }}>Check-out</TableCell>\n                          <TableCell sx={{ fontWeight: 'bold' }}>Duration</TableCell>\n                          <TableCell sx={{ fontWeight: 'bold' }}>Retailer</TableCell>\n                          <TableCell sx={{ fontWeight: 'bold' }}>Products Sold</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {filteredVisits.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((visit) => [\n                          <TableRow key={visit.id} sx={{ '&:hover': { backgroundColor: 'rgba(0,0,0,0.04)' } }}>\n                            <TableCell>\n                              {visit.checkInTime instanceof Date && !isNaN(visit.checkInTime) ? format(visit.checkInTime, 'MMM d, yyyy, h:mm a') : 'N/A'}\n                            </TableCell>\n                            <TableCell>\n                              {visit.checkOutTime instanceof Date && !isNaN(visit.checkOutTime) ? format(visit.checkOutTime, 'MMM d, yyyy, h:mm a') : 'N/A'}\n                            </TableCell>\n                            <TableCell>\n                              {visit.checkInTime instanceof Date && !isNaN(visit.checkInTime) && \n                               visit.checkOutTime instanceof Date && !isNaN(visit.checkOutTime) ? \n                                (() => {\n                                  const durationMs = visit.checkOutTime.getTime() - visit.checkInTime.getTime();\n                                  const minutes = Math.floor(durationMs / 60000);\n                                  if (minutes < 60) {\n                                    return `${minutes} min${minutes !== 1 ? 's' : ''}`;\n                                  } else {\n                                    const hours = Math.floor(minutes / 60);\n                                    const remainingMins = minutes % 60;\n                                    return `${hours} hr${hours !== 1 ? 's' : ''} ${remainingMins} min${remainingMins !== 1 ? 's' : ''}`;\n                                  }\n                                })() : 'N/A'}\n                            </TableCell>\n                            <TableCell>{retailerMap[visit.retailerId] || 'N/A'}</TableCell>\n                            <TableCell>\n                              {Array.isArray(visit.products) && visit.products.length > 0 ? (\n                                <>\n                                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                                    <Typography variant=\"body2\" sx={{ mr: 1 }}>\n                                      {expandedRows[visit.id]\n                                        ? ''\n                                        : `${visit.products.length} product${visit.products.length > 1 ? 's' : ''}`}\n                                    </Typography>\n                                    <IconButton\n                                      size=\"small\"\n                                      onClick={() => handleToggleExpand(visit.id)}\n                                      aria-label={expandedRows[visit.id] ? 'Collapse products' : 'Expand products'}\n                                    >\n                                      {expandedRows[visit.id] ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                                    </IconButton>\n                                  </Box>\n                                </>\n                              ) : '—'}\n                            </TableCell>\n                          </TableRow>,\n                          expandedRows[visit.id] && (\n                            <TableRow key={`${visit.id}-expanded`}>\n                              <TableCell colSpan={5} sx={{ py: 0, borderBottom: 'none' }}>\n                                <Box sx={{ py: 2 }}>\n                                  <Table size=\"small\">\n                                    <TableHead>\n                                      <TableRow>\n                                        <TableCell sx={{ fontWeight: 600, color: theme.palette.warning.main, borderBottom: 'none', py: 0.5 }}>Product Name</TableCell>\n                                        <TableCell sx={{ fontWeight: 600, color: theme.palette.warning.main, borderBottom: 'none', py: 0.5 }}>Count</TableCell>\n                                      </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                      {visit.products.map((product, idx) => (\n                                        <TableRow key={idx}>\n                                          <TableCell sx={{ borderBottom: 'none', py: 0.5 }}>\n                                            {productMap[product.productId]?.name || 'Product'}\n                                          </TableCell>\n                                          <TableCell sx={{ borderBottom: 'none', py: 0.5 }}>\n                                            {product.count}\n                                          </TableCell>\n                                        </TableRow>\n                                      ))}\n                                    </TableBody>\n                                  </Table>\n                                </Box>\n                              </TableCell>\n                            </TableRow>\n                          )\n                        ])}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n                <TablePagination\n                  rowsPerPageOptions={[5, 10, 25]}\n                  component=\"div\"\n                  count={filteredVisits.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  onPageChange={(e, newPage) => setPage(newPage)}\n                  onRowsPerPageChange={e => { setRowsPerPage(parseInt(e.target.value, 10)); setPage(0); }}\n                />\n              </Box>\n            </CardContent>\n          </Card>\n        </>\n      ) : staff && staff.role !== 'MarketingStaff' ? (\n        <Card sx={{ borderRadius: 2, boxShadow: theme.shadows[2], mb: 4 }}>\n          <CardContent sx={{ p: 3 }}>\n            <Typography variant=\"h6\" fontWeight=\"bold\" sx={{ mb: 2 }}>\n              <AssessmentIcon sx={{ mr: 1, verticalAlign: 'text-bottom' }} />\n              Direct Subordinates\n            </Typography>\n            {loading ? (\n              <LinearProgress sx={{ mt: 2, mb: 1, borderRadius: 1 }} />\n            ) : subordinateStats.length === 0 ? (\n              <Box sx={{ p: 3, textAlign: 'center', backgroundColor: 'rgba(0,0,0,0.02)' }}>\n                <Typography variant=\"body1\" color=\"text.secondary\">No direct subordinates found</Typography>\n              </Box>\n            ) : (\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Name</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Role</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Status</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Visits</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Retailers Reached</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Cartons Sold</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Sales Amount</TableCell>\n                      <TableCell align=\"right\" sx={{ fontWeight: 'bold' }}>Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {subordinateStats.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((sub) => (\n                      <TableRow key={sub.id} sx={{ '&:hover': { backgroundColor: 'rgba(0,0,0,0.04)' } }}>\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <Avatar sx={{ bgcolor: theme.palette.warning.light, color: theme.palette.warning.contrastText || '#fff', width: 36, height: 36, mr: 2, fontSize: '0.9rem' }}>{getInitials(sub.name)}</Avatar>\n                            <Typography variant=\"subtitle2\">{sub.name}</Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell>{sub.role}</TableCell>\n                        <TableCell>\n                          <Chip label={sub.status} color={sub.status === 'Active' ? 'success' : 'default'} size=\"small\" sx={{ borderRadius: '14px', fontWeight: 500 }} />\n                        </TableCell>\n                        <TableCell>{sub.visitCount}</TableCell>\n                        <TableCell>{sub.retailersReached}</TableCell>\n                        <TableCell>{sub.cartonsSold}</TableCell>\n                        <TableCell>\n                          <Typography variant=\"body2\" fontWeight={600} color={theme.palette.success.main}>\n                            ₹{sub.totalSalesAmount.toFixed(2)}\n                          </Typography>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Tooltip title=\"View Details\">\n                            <IconButton onClick={() => navigate(`/staff/${sub.id}/visits`)} size=\"small\" sx={{ ml: 1, color: theme.palette.warning.main, bgcolor: 'rgba(255, 152, 0, 0.08)', '&:hover': { bgcolor: 'rgba(255, 152, 0, 0.12)' } }}>\n                              <AssessmentIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            )}\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25]}\n              component=\"div\"\n              count={subordinateStats.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onPageChange={(e, newPage) => setPage(newPage)}\n              onRowsPerPageChange={e => { setRowsPerPage(parseInt(e.target.value, 10)); setPage(0); }}\n            />\n          </CardContent>\n        </Card>\n      ) : null}\n      <Button variant=\"outlined\" onClick={() => navigate(-1)} sx={{ mt: 3 }} startIcon={<ArrowBackIcon />}>Back</Button>\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n          severity={snackbar.severity}\n          sx={{ width: '100%', boxShadow: theme.shadows[3], borderRadius: 2 }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default StaffVisitHistory; "],"names":["getInitials","name","split","map","part","join","toUpperCase","substring","toDateSafe","val","Date","toDate","parsed","isNaN","getAllSubordinateMarketingStaffIds","staffId","allUsers","result","directSubs","filter","u","reportingToId","sub","role","push","id","concat","mapContainerStyle","width","height","borderRadius","StaffVisitHistory","theme","useTheme","navigate","useNavigate","useParams","fallbackStaff","useLocation","state","userProfile","authAllUsers","loading","authLoading","useAuth","staff","setStaff","useState","setAllUsers","setLoading","visits","setVisits","snackbar","setSnackbar","open","message","severity","page","setPage","rowsPerPage","setRowsPerPage","subordinateStats","setSubordinateStats","staffLoading","setStaffLoading","productMap","setProductMap","retailerMap","setRetailerMap","selectedDate","setSelectedDate","toISOString","mapCenter","setMapCenter","lat","lng","mapZoom","setMapZoom","selectedMarker","setSelectedMarker","expandedRows","setExpandedRows","isLoaded","useJsApiLoader","googleMapsApiKey","process","filteredVisits","useMemo","visit","checkInTime","visitDate","format","mapMarkers","length","checkInLocation","latitude","longitude","position","retailerName","retailerId","products","sort","a","b","getTime","mapPath","marker","polylineOptions","strokeColor","palette","warning","main","strokeOpacity","strokeWeight","geodesic","useEffect","lats","m","lngs","avgLat","reduce","sum","avgLng","async","staffDoc","getDoc","doc","db","exists","data","err","fetchData","visitIds","Array","isArray","visitsData","Promise","all","docSnap","checkOutTime","fetchVisits","stats","visitCount","retailersReached","cartonsSold","totalSalesAmount","marketingStaffIds","allVisitIds","msId","ms","find","visitDocs","Set","v","_v$data","size","forEach","visitData","product","count","parseInt","rate","parseFloat","status","active","fetchSubordinateStats","productsCollection","collection","productSnapshot","getDocs","pMap","docs","d","error","fetchProducts","retailersCollection","retailerSnapshot","rMap","fetchRetailers","canView","myId","allowedIds","getSubordinateIds","includes","undefined","_jsxs","Box","sx","p","children","_jsx","Card","mb","boxShadow","shadows","CardContent","Grid","container","spacing","item","xs","md","display","alignItems","_Fragment","Skeleton","variant","mr","Typography","gutterBottom","fontWeight","color","email","phoneNumber","flex","justifyContent","gap","mt","textAlign","LinearProgress","Button","onClick","startIcon","ArrowBackIcon","Avatar","bgcolor","light","contrastText","fontSize","PersonIcon","StoreIcon","verticalAlign","TextField","label","type","value","onChange","e","target","InputLabelProps","shrink","minWidth","InputProps","startAdornment","InputAdornment","CalendarIcon","backgroundColor","GoogleMap","center","zoom","options","mapTypeControl","streetViewControl","fullscreenControl","Polyline","path","index","Marker","handleMarkerClick","InfoWindow","onCloseClick","InventoryIcon","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","slice","durationMs","minutes","Math","floor","hours","remainingMins","IconButton","handleToggleExpand","visitId","prev","ExpandLessIcon","ExpandMoreIcon","colSpan","py","borderBottom","idx","_productMap$product$p","productId","TablePagination","rowsPerPageOptions","component","onPageChange","newPage","onRowsPerPageChange","AssessmentIcon","align","Chip","success","toFixed","Tooltip","title","ml","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}