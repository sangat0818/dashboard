{"version":3,"file":"static/js/296.1de88548.chunk.js","mappings":"yKAIA,SAAeA,EAAAA,EAAAA,IAA2BC,EAAAA,EAAAA,KAAK,OAAQ,CACrDC,EAAG,kJACD,Y,yDCFJ,SAAeF,EAAAA,EAAAA,IAA2BC,EAAAA,EAAAA,KAAK,OAAQ,CACrDC,EAAG,6VACD,c,wXCFJ,SAAeF,EAAAA,EAAAA,IAA2BC,EAAAA,EAAAA,KAAK,OAAQ,CACrDE,SAAU,UACVD,EAAG,iKACD,e,cCHJ,SAAeF,EAAAA,EAAAA,IAA2BC,EAAAA,EAAAA,KAAK,OAAQ,CACrDC,EAAG,4EACD,c,sDCwBJ,MAwBME,EAAgCA,CAACC,EAAWC,KAChD,MAAMC,EAAqBD,EAASE,QAAOC,GAAKA,EAAEC,gBAAkBL,IAEpE,IAAIM,EAAkB,IAAIJ,GAC1B,MAAMK,EAAiB,GAcvB,OAXAL,EAAmBM,SAAQC,IACzB,GAAiB,mBAAbA,EAAIC,KACNH,EAAeI,KAAKF,OACf,CAEL,MAAMG,EAAab,EAA8BU,EAAII,GAAIZ,GACzDK,EAAkB,IAAIA,KAAoBM,EAAWN,iBACrDC,EAAeI,QAAQC,EAAWL,eACpC,KAGK,CACLD,kBACAC,iBACD,EAIGO,EAAwBA,CAACd,EAAWC,IAEbA,EAASE,QAAOC,GAAKA,EAAEC,gBAAkBL,IAGpBe,KAAIN,IAElD,GAAiB,mBAAbA,EAAIC,KACN,MAAO,IACFD,EACHO,iBAAiB,EACjBC,oBAAqB,GAKzB,MAAM,eAAEV,GAAmBR,EAA8BU,EAAII,GAAIZ,GACjE,MAAO,IACFQ,EACHO,iBAAiB,EACjBC,oBAAqBV,EAAeW,OACrC,IAMU,SAASC,IACtB,MAAMC,GAAQC,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,OAEX,UAAEvB,KADSwB,EAAAA,EAAAA,OACKC,EAAAA,EAAAA,OAChB,YAAEC,EAAW,SAAEzB,EAAU0B,QAASC,IAAgBC,EAAAA,EAAAA,MAGjDF,EAASG,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,KAChCK,GAAYC,KAAiBN,EAAAA,EAAAA,UAAS,KACtCO,GAAYC,KAAiBR,EAAAA,EAAAA,UAAS,KACtCS,GAAUC,KAAeV,EAAAA,EAAAA,UAAS,CAAEW,MAAM,EAAOC,QAAS,GAAIC,SAAU,aACxEC,GAAMC,KAAWf,EAAAA,EAAAA,UAAS,IAC1BgB,GAAaC,KAAkBjB,EAAAA,EAAAA,UAAS,KACxCkB,GAAgBC,KAAqBnB,EAAAA,EAAAA,UAAS,OAC9CoB,GAAaC,KAAkBrB,EAAAA,EAAAA,UAAS,KAGxCsB,GAAeC,KAAoBvB,EAAAA,EAAAA,UAAS,IAC5CwB,GAAqBC,KAA0BzB,EAAAA,EAAAA,UAAS,IACxD0B,GAAaC,KAAkB3B,EAAAA,EAAAA,UAAS,IACxC4B,GAAkBC,KAAuB7B,EAAAA,EAAAA,UAAS,IAGzD8B,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAQ,IAAIC,KACZC,EAAW,IAAID,KAAKD,EAAMG,cAAeH,EAAMI,WAAY,GAC3DC,EAAU,IAAIJ,KAAKD,EAAMG,cAAeH,EAAMI,WAAa,EAAG,GAEpEjC,EAAa+B,EAASI,cAAcC,MAAM,KAAK,IAC/ClC,EAAWgC,EAAQC,cAAcC,MAAM,KAAK,GAAG,GAC9C,KAGHR,EAAAA,EAAAA,YAAU,KA6DJ5D,GAAYA,EAASiB,OAAS,GAAKQ,GA5DlB4C,WACnB,GAAItE,EACF,IAEE,MAAMuE,EAAUtE,EAASuE,MAAKpE,GAAKA,EAAES,KAAOb,IAC5C,GAAIuE,EAAS,CACXrB,GAAkBqB,GAGlB,MAAME,EAAiB,GACPF,EAAQ1D,GAAxB,IACI6D,EAAUH,EAEd,KAAOG,IACLD,EAAeE,QAAQD,GAClBA,EAAQrE,gBACbqE,EAAUzE,EAASuE,MAAKpE,GAAKA,EAAES,KAAO6D,EAAQrE,gBAGhD+C,GAAeqB,EACjB,MAE6BG,MAGzB1B,GAAkB,MAClBE,GAAe,MAEfX,GAAY,CACVC,MAAM,EACNC,QAAS,0DACTC,SAAU,UAEZtB,EAAS,8BAGf,CAAE,MAAOuD,GACPC,QAAQD,MAAM,4BAA6BA,EAC7C,MAIA,GAD2BD,KAEzB1B,GAAkB,MAClBE,GAAe,QACV,CAEL,MAAM2B,EAAkB,OAAXrD,QAAW,IAAXA,OAAW,EAAXA,EAAab,GAC1B,GAAIkE,EAAM,CACR,MAAMC,EAAK/E,EAASuE,MAAKpE,GAAKA,EAAES,KAAOkE,IACnCC,IACF9B,GAAkB8B,GAClB5B,GAAe,CAAC4B,IAChB1D,EAAS,8BAA8ByD,KAE3C,CACF,CACF,EAIAE,EACF,GACC,CAACjF,EAAWC,EAAUyB,EAAaJ,IAGtC,MAAMsD,GAA2BA,MAC1BlD,GAGE,CAAC,QAAS,mBAAmBwD,SAASxD,EAAYhB,MAIrDyE,IAAqBC,EAAAA,EAAAA,UAAQ,KACjC,IAAK1D,IAAgBzB,EAAU,MAAO,GAItC,GAHA6E,QAAQO,IAAI,gBAAiBpC,GAAiB,WAAWA,GAAepC,KAAO,cAG3EoC,GAAgB,CAElB,MAAMqC,EAAexE,EAAsBmC,GAAepC,GAAIZ,GAE9D,OADA6E,QAAQO,IAAI,SAASC,EAAapE,0CAA0C+B,GAAepC,MACpFyE,CACT,CAGA,GAAyB,UAArB5D,EAAYhB,KAAkB,CAEhC,MAKM6E,EALetF,EAASE,QAAOC,GACxB,oBAAXA,EAAEM,MAA8BN,EAAEoF,SAINzE,KAAIwD,IAChC,MAAMkB,EAAY1F,EAA8BwE,EAAQ1D,GAAIZ,GAC5D,MAAO,IACFsE,EACHvD,gBAAiByE,EAAUnF,gBAAgBY,OAAS,EACpDD,oBAAqBwE,EAAUlF,eAAeW,OAC/C,IAIH,OADA4D,QAAQO,IAAI,qBAAqBE,EAASrE,4BACnCqE,CACT,CAGA,GAAyB,oBAArB7D,EAAYhB,KAA4B,CAC1C,MAAMgF,EAAO5E,EAAsBY,EAAYb,GAAIZ,GAEnD,OADA6E,QAAQO,IAAI,gCAAgCK,EAAKxE,uBAC1CwE,CACT,CAGA,GAAyB,gBAArBhE,EAAYhB,KAAwB,CACtC,MAAMgF,EAAO5E,EAAsBY,EAAYb,GAAIZ,GAEnD,OADA6E,QAAQO,IAAI,4BAA4BK,EAAKxE,uBACtCwE,CACT,CAGA,GAAyB,eAArBhE,EAAYhB,KAAuB,CACrC,MAAMgF,EAAO5E,EAAsBY,EAAYb,GAAIZ,GAEnD,OADA6E,QAAQO,IAAI,0BAA0BK,EAAKxE,uBACpCwE,CACT,CAGA,OADAZ,QAAQO,IAAI,yCAA0C3D,EAAYhB,MAC3D,EAAE,GACR,CAACgB,EAAazB,EAAUgD,KAGrB0C,IAAmBP,EAAAA,EAAAA,UAAQ,KAC/B,IAAKhD,GAAWwD,OAAQ,OAAOT,GAG/B,MAAMU,EAAczD,GAAW0D,cAC/B,OAAOX,GAAmBhF,QAAOoE,IAAO,IAAAwB,EAAA,OAC1B,QAD0BA,EACtCxB,EAAQyB,YAAI,IAAAD,OAAA,EAAZA,EAAcD,cAAcZ,SAASW,EAAY,GAClD,GACA,CAACV,GAAoB/C,MAGxByB,EAAAA,EAAAA,YAAU,KACR,GAAI7B,GAAaE,IAAYP,IAAmB,OAAR1B,QAAQ,IAARA,OAAQ,EAARA,EAAUiB,QAAS,IAAuB,OAAlBiE,SAAkB,IAAlBA,QAAkB,EAAlBA,GAAoBjE,QAAS,EAAG,CAE9F,MAAM+E,EAAQC,YAAW,KACvBpB,QAAQO,IAAI,mCAAoCF,GAAmBjE,QACnEiF,IAAgB,GACf,KACH,MAAO,IAAMC,aAAaH,EAC5B,IACC,CAACjE,EAAWE,EAASjC,EAAUkF,KAGlC,MAAMgB,GAAiB7B,UACrB,GAAKtC,GAAcE,EAAnB,CASAJ,GAAW,GAEX,IAEE,MAAMuE,EAAiB,IAAItC,KAAK/B,EAAY,aACtCsE,EAAe,IAAIvC,KAAK7B,EAAU,aAGxC,GAAgC,IAA5ByD,GAAiBzE,OAenB,OAdA4D,QAAQO,IAAI,2CAA4C,CACtDkB,SAAqB,OAAX7E,QAAW,IAAXA,OAAW,EAAXA,EAAahB,KACvB8F,iBAAgC,OAAdvD,SAAc,IAAdA,QAAc,EAAdA,GAAgBpC,KAGpC0B,GAAc,IACdE,GAAY,CACVC,MAAM,EACNC,QAA+B,WAAX,OAAXjB,QAAW,IAAXA,OAAW,EAAXA,EAAahB,MACpB,iFACA,kDACFkC,SAAU,cAEZd,GAAW,GAIbgD,QAAQO,IAAI,yBAAyBM,GAAiBzE,kBAAmByE,IAGzE,MAAMc,EAAiB,GACvB,IAAIC,EAAoB,EACpBC,EAA4B,EAC5BC,EAAyB,EAG7B,IAAK,MAAMrC,KAAWoB,GAAkB,CACtC,IAAIpF,EAAiB,GAGrB,GAAqB,mBAAjBgE,EAAQ7D,KACVH,EAAiB,CAACgE,OACb,CAGLhE,EADeR,EAA8BwE,EAAQ1D,GAAIZ,GACjCM,cAC1B,CAGA,IAAIsG,EAAa,EACbC,EAAkB,IAAIC,IACtBC,EAAoB,EACpBC,EAAuB,EAG3B,GAAI1G,EAAeW,OAAS,EAAG,CAC7B,MAAMgG,EAAW3G,EAAeQ,KAAIoG,GAASA,EAAMtG,KACnD8F,GAA6BpG,EAAeW,OAG5C,MAAMkG,GAAcC,EAAAA,EAAAA,IAClBC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,WACfC,EAAAA,EAAAA,IAAM,cAAe,KAAMnB,IAC3BmB,EAAAA,EAAAA,IAAM,cAAe,KAAMlB,IAC3BmB,EAAAA,EAAAA,IAAQ,cAAe,SAIzB,IAAIC,SADyBC,EAAAA,EAAAA,IAAQP,IACLQ,KAAK7G,KAAI8G,IAAG,CAC1ChH,GAAIgH,EAAIhH,MACLgH,EAAIC,WAITJ,EAAaA,EAAWvH,QAAO4H,GAASb,EAAShC,SAAS6C,EAAMC,UAGhEnB,EAAaa,EAAWxG,OACxBwF,GAAqBG,EAGrBa,EAAWlH,SAAQuH,IACbA,EAAME,YAAYnB,EAAgBoB,IAAIH,EAAME,WAAW,IAI7D,MAAME,GAAoBd,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,iBACzCa,QAA6BT,EAAAA,EAAAA,IAAQQ,GACrCE,EAAkB,CAAC,EAEzBD,EAAqB5H,SAAQqH,IAC3B,MAAMC,EAAOD,EAAIC,OACbA,EAAKQ,WAAaR,EAAKS,OACzBF,EAAgBP,EAAKQ,WAAaE,WAAWV,EAAKS,MACpD,IAIF,MAAME,EAAoB,IAAI1B,IAC9BW,EAAWlH,SAAQuH,IACbA,EAAMW,kBACRD,EAAkBP,IAAIH,EAAMW,iBAC9B,IAGF,MAAMC,EAAsB,CAAC,EAC7B,GAAIF,EAAkBG,KAAO,EAAG,CAC9B,MAAMC,EAAoBC,MAAMC,KAAKN,GAAmB1H,KAAIuD,UAC1D,IACE,MAAM0E,QAAiBC,EAAAA,EAAAA,KAAOpB,EAAAA,EAAAA,IAAIN,EAAAA,GAAI,mBAAoB2B,IACtDF,EAASG,WACXR,EAAoBO,GAAWF,EAASlB,OAE5C,CAAE,MAAOjD,GACPC,QAAQD,MAAM,kCAAkCqE,KAAYrE,EAC9D,WAGIuE,QAAQC,IAAIR,EACpB,CAGA,IAAK,MAAMd,KAASL,EAClB,GAAIoB,MAAMQ,QAAQvB,EAAMwB,UACtB,IAAK,MAAMC,KAAWzB,EAAMwB,SAAU,CACpC,MAAME,EAAQC,SAASF,EAAQC,QAAU,EACzCzC,GAAqByC,EAGrB,IAAIlB,EAAO,KAGX,GAAIiB,EAAQjB,KACVA,EAAOC,WAAWgB,EAAQjB,WAGvB,GAAIR,EAAMW,kBAAoBC,EAAoBZ,EAAMW,kBAAmB,CAAC,IAADiB,EAC9E,MACMC,EAA4C,QAAhCD,EADKhB,EAAoBZ,EAAMW,kBACbmB,sBAAc,IAAAF,OAAA,EAA7BA,EAA+BnF,MAAKsF,GAAMA,EAAGxB,YAAckB,EAAQlB,YACpFsB,GAAgBA,EAAarB,OAC/BA,EAAOC,WAAWoB,EAAarB,MAEnC,CAOA,GALa,OAATA,GAAiBF,EAAgBmB,EAAQlB,aAC3CC,EAAOF,EAAgBmB,EAAQlB,YAIpB,OAATC,EAAe,CAEjBtB,GADmBwC,EAAQlB,CAE7B,CACF,CAIJ3B,GAA0BK,CAC5B,CAGAR,EAAe9F,KAAK,CAClBE,GAAI0D,EAAQ1D,GACZb,UAAWuE,EAAQ1D,GACnBkJ,YAAaxF,EAAQyB,MAAQ,UAC7BgE,YAAazF,EAAQ7D,KACrBuJ,SAAU1J,EAAeW,OACzBuC,YAAaoD,EACbC,gBAAiBA,EAAgB8B,KACjCsB,cAAelD,EACfrD,iBAAkBsD,EAClBjG,gBAAiBuD,EAAQvD,kBAAmB,EAE5CmJ,eAAgB5J,EAAeW,QAAU2F,EAAatG,EAAeW,QAAQkJ,QAAQ,GAAK,EAC1FC,cAAe9J,EAAeW,QAAU+F,EAAuB1G,EAAeW,QAAQkJ,QAAQ,GAAK,EACnGE,cAAezD,GAAcI,EAAuBJ,GAAYuD,QAAQ,GAAK,GAEjF,CAGA9G,GAAiBmD,EAAevF,QAChCsC,GAAuBmD,GACvBjD,GAAegD,GACf9C,GAAoBgD,GAGpBH,EAAe8D,MAAK,CAACC,EAAGC,IAAMA,EAAE9G,iBAAmB6G,EAAE7G,mBAGrDpB,GAAckE,GAGgB,IAA1BA,EAAevF,QACjBuB,GAAY,CACVC,MAAM,EACNC,QAAS,kCACTC,SAAU,QAGhB,CAAE,MAAOiC,GACPC,QAAQD,MAAM,2BAA4BA,GAC1CpC,GAAY,CACVC,MAAM,EACNC,QAAS,4BAA8BkC,EAAMlC,QAC7CC,SAAU,SAEd,CAAC,QACCd,GAAW,EACb,CAjNA,MANEW,GAAY,CACVC,MAAM,EACNC,QAAS,6BACTC,SAAU,WAoNd,EAII8H,IAAetF,EAAAA,EAAAA,UAAQ,KAC3B,IAAKhD,GAAWwD,OAAQ,OAAOtD,GAE/B,MAAMuD,EAAczD,GAAW0D,cAC/B,OAAOxD,GAAWnC,QAAOoE,IAAO,IAAAoG,EAAAC,EAAA,OACV,QAAnBD,EAAApG,EAAQwF,mBAAW,IAAAY,OAAA,EAAnBA,EAAqB7E,cAAcZ,SAASW,MAA4B,QAAhB+E,EAAIrG,EAAQyB,YAAI,IAAA4E,OAAA,EAAZA,EAAc9E,cAAcZ,SAASW,GAAa,GAChH,GACA,CAACvD,GAAYF,KAaVyI,GAAgBH,GAAaI,MACjCjI,GAAOE,GACPF,GAAOE,GAAcA,IAsEjBgI,GAAgBrK,IACpB,OAAQA,GACN,IAAK,kBACH,OAAOU,EAAM4J,QAAQC,QAAQC,KAC/B,IAAK,cACH,OAAO9J,EAAM4J,QAAQG,KAAKD,KAC5B,IAAK,aACH,OAAO9J,EAAM4J,QAAQI,QAAQF,KAC/B,QACE,OAAO9J,EAAM4J,QAAQK,KAAK,KAC9B,EAiCF,OAAKC,EAAAA,EAAAA,IAAgC5J,IAWnC6J,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACF7L,EAAAA,EAAAA,KAAC8L,EAAAA,EAAI,CAACC,GAAI,CAAEC,aAAc,EAAGC,UAAWzK,EAAM0K,QAAQ,GAAIC,GAAI,GAAIN,UAChEF,EAAAA,EAAAA,MAACS,EAAAA,EAAW,CAACL,GAAI,CAAEM,EAAG,GAAIR,SAAA,EAExBF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEO,QAAS,OAAQC,WAAY,SAAUJ,GAAI,GAAIN,SAAA,EACxD7L,EAAAA,EAAAA,KAACwM,EAAAA,EAAM,CACLT,GAAI,CACFU,QAASjL,EAAM4J,QAAQC,QAAQqB,MAC/BC,MAAOnL,EAAM4J,QAAQC,QAAQuB,cAAgB,OAC7CC,MAAO,GACPC,OAAQ,GACRC,GAAI,GACJlB,UAEF7L,EAAAA,EAAAA,KAACgN,EAAAA,EAAU,OAEbrB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACF7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,KAAKC,WAAW,OAAOR,MAAM,eAAcd,SAC5DxI,GAAiB,GAAGA,GAAe+C,0BAA4B,8BAElEpG,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQP,MAAM,iBAAgBd,SAC/CxI,GACG,0BAA0BA,GAAe+C,6BACzC,+DAMT7C,GAAYjC,OAAS,IACpBqK,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEI,GAAI,EAAGG,QAAS,OAAQC,WAAY,SAAUa,SAAU,QAASvB,SAAA,EAC1E7L,EAAAA,EAAAA,KAACqN,EAAAA,EAAM,CACLH,QAAQ,OACRlE,KAAK,QACLsE,QAASA,IAAM5L,EAAS,8BACxBqK,GAAI,CAAEgB,GAAI,GAAIlB,SACf,SAGAtI,GAAYpC,KAAI,CAACoM,EAAMC,KACtB7B,EAAAA,EAAAA,MAAC8B,EAAAA,SAAc,CAAA5B,SAAA,EACb7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQP,MAAM,iBAAiBZ,GAAI,CAAE2B,GAAI,IAAM7B,SAAC,MAGnE2B,IAAUjK,GAAYjC,OAAS,GAC9BtB,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQP,MAAM,UAAUQ,WAAW,SAAQtB,SAC5D0B,EAAKnH,QAGRpG,EAAAA,EAAAA,KAACqN,EAAAA,EAAM,CACLH,QAAQ,OACRlE,KAAK,QACLsE,QAASA,KAxEH3I,SAwE0B4I,IAvEnC5I,EAAQ1D,GACrBS,EAAS,8BAA8BiD,EAAQ1D,MAE/CS,EAAS,6BAoE6C,EACtCqK,GAAI,CAAEgB,GAAI,GAAIlB,SAEb0B,EAAKnH,SAfSmH,EAAKtM,UAwBhCjB,EAAAA,EAAAA,KAAC2N,EAAAA,EAAK,CAAC5B,GAAI,CAAEM,EAAG,EAAGF,GAAI,EAAGH,aAAc,EAAGS,QAASjL,EAAM4J,QAAQG,KAAKmB,MAAOC,MAAOnL,EAAM4J,QAAQG,KAAKqB,cAAef,UACrHF,EAAAA,EAAAA,MAACsB,EAAAA,EAAU,CAACC,QAAQ,QAAQC,WAAY,IAAItB,SAAA,EAC1C7L,EAAAA,EAAAA,KAAA,UAAA6L,SAAQ,gBAAoB,mFAC3BxI,GAAiB,oEAAsE,SAK5FrD,EAAAA,EAAAA,KAAC2N,EAAAA,EAAK,CAAC5B,GAAI,CAAEM,EAAG,EAAGF,GAAI,EAAGH,aAAc,GAAIH,UAC1CF,EAAAA,EAAAA,MAACiC,EAAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAGvB,WAAW,SAAQV,SAAA,EAC7C7L,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAEnC,UACvB7L,EAAAA,EAAAA,KAACiO,EAAAA,EAAS,CACRC,MAAM,iBACNC,KAAK,OACLnF,KAAK,QACLoF,WAAS,EACTC,MAAO7L,GACP8L,SAAWC,GAAM9L,GAAc8L,EAAEC,OAAOH,OACxCI,WAAY,CACVC,gBACE1O,EAAAA,EAAAA,KAAC2O,EAAAA,EAAc,CAACC,SAAS,QAAO/C,UAC9B7L,EAAAA,EAAAA,KAAC6O,EAAAA,EAAU,CAAC9C,GAAI,CAAEY,MAAOnL,EAAM4J,QAAQC,QAAQC,WAIrDS,GAAI,CAAE,2BAA4B,CAAEC,aAAc,SAGtDhM,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAEnC,UACvB7L,EAAAA,EAAAA,KAACiO,EAAAA,EAAS,CACRC,MAAM,aACNC,KAAK,OACLnF,KAAK,QACLoF,WAAS,EACTC,MAAOjM,EACPkM,SAAWC,GAAMlM,EAAakM,EAAEC,OAAOH,OACvCS,gBAAiB,CAAEC,QAAQ,GAC3BN,WAAY,CACVC,gBACE1O,EAAAA,EAAAA,KAAC2O,EAAAA,EAAc,CAACC,SAAS,QAAO/C,UAC9B7L,EAAAA,EAAAA,KAACgP,EAAAA,EAAY,CAACjD,GAAI,CAAEY,MAAOnL,EAAM4J,QAAQC,QAAQC,WAIvDS,GAAI,CAAE,2BAA4B,CAAEC,aAAc,SAGtDhM,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAEnC,UACvB7L,EAAAA,EAAAA,KAACiO,EAAAA,EAAS,CACRC,MAAM,WACNC,KAAK,OACLnF,KAAK,QACLoF,WAAS,EACTC,MAAO/L,EACPgM,SAAWC,GAAMhM,EAAWgM,EAAEC,OAAOH,OACrCS,gBAAiB,CAAEC,QAAQ,GAC3BN,WAAY,CACVC,gBACE1O,EAAAA,EAAAA,KAAC2O,EAAAA,EAAc,CAACC,SAAS,QAAO/C,UAC9B7L,EAAAA,EAAAA,KAACiP,EAAAA,EAAa,CAAClD,GAAI,CAAEY,MAAOnL,EAAM4J,QAAQC,QAAQC,WAIxDS,GAAI,CAAE,2BAA4B,CAAEC,aAAc,SAGtDhM,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIC,GAAI,EAAEnC,UACvBF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEO,QAAS,OAAQ4C,IAAK,GAAIrD,SAAA,EACnC7L,EAAAA,EAAAA,KAACqN,EAAAA,EAAM,CACLH,QAAQ,YACRI,QAAS/G,GACT4I,SAAUpN,EACVqN,WAAWpP,EAAAA,EAAAA,KAACqP,EAAAA,EAAU,IACtBtD,GAAI,CACFC,aAAc,OACdS,QAASjL,EAAM4J,QAAQC,QAAQC,KAC/B,UAAW,CAAEmB,QAASjL,EAAM4J,QAAQC,QAAQiE,OAC5CzD,SACH,mBAGD7L,EAAAA,EAAAA,KAACqN,EAAAA,EAAM,CACLH,QAAQ,WACRI,QA3QEiC,KAClB,GAA0B,IAAtB7M,GAAWpB,OAMb,YALAuB,GAAY,CACVC,MAAM,EACNC,QAAS,oBACTC,SAAU,YAMd,MAcMwM,EAAO9M,GAAWvB,KAAIwD,GAAW,CACrCA,EAAQwF,YACRxF,EAAQyF,YACRzF,EAAQ0F,SACR1F,EAAQd,YACRc,EAAQuC,gBACRvC,EAAQ2F,cACR3F,EAAQZ,iBAAiByG,QAAQ,GACjC7F,EAAQ4F,eACR5F,EAAQ8F,cACR9F,EAAQ+F,iBAIV,IAAI+E,EA5BY,CACd,eACA,OACA,YACA,eACA,mBACA,iBACA,qBACA,mBACA,kBACA,mBAkBuBC,KAAK,KAAO,KACrCF,EAAK5O,SAAQ+O,IACX,MAAMC,EAAeD,EAAIxO,KAAI0O,GAEN,kBAAVA,IAAuBA,EAAMvK,SAAS,MAAQuK,EAAMvK,SAAS,MAC/D,IAAIuK,EAAMC,QAAQ,KAAM,SAE1BD,IAETJ,GAAcG,EAAaF,KAAK,KAAO,IAAI,IAI7CD,EAAa,yCAAyCrN,QAAgBE,QAAgBmN,EAGtF,MAAMM,EAAO,IAAIC,KAAK,CAACP,GAAa,CAAEtB,KAAM,4BACtC8B,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAON,EACZG,EAAKI,aAAa,WAAY,uBAAuBpO,KAAaE,SAClE+N,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLN,SAASI,KAAKG,YAAYR,EAAK,EA8MfjB,SAAUpN,GAAiC,IAAtBW,GAAWpB,OAChC8N,WAAWpP,EAAAA,EAAAA,KAAC6Q,EAAAA,EAAgB,IAC5B9E,GAAI,CACFC,aAAc,OACd8E,YAAatP,EAAM4J,QAAQC,QAAQC,KACnCqB,MAAOnL,EAAM4J,QAAQC,QAAQC,KAC7B,UAAW,CAAEwF,YAAatP,EAAM4J,QAAQC,QAAQiE,OAChDzD,SACH,0BAST7L,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAACG,GAAI,CAAEI,GAAI,GAAIN,UACjBF,EAAAA,EAAAA,MAACiC,EAAAA,EAAI,CAACC,WAAS,EAACC,QAAS,EAAEjC,SAAA,EACzB7L,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIgD,GAAI,EAAG/C,GAAI,EAAEnC,UAC9BF,EAAAA,EAAAA,MAACgC,EAAAA,EAAK,CACJqD,UAAW,EACXjF,GAAI,CACFM,EAAG,EACHL,aAAc,EACdS,QAASjL,EAAM4J,QAAQC,QAAQqB,MAC/BC,MAAOnL,EAAM4J,QAAQC,QAAQuB,aAC7BqE,UAAW,SACXnE,OAAQ,OACRR,QAAS,OACT4E,cAAe,SACfC,eAAgB,UAChBtF,SAAA,EAEF7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,KAAKnB,GAAI,CAAEoB,WAAY,IAAKhB,GAAI,GAAIN,SACrDpI,MAEHzD,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAOrB,SAAC,0BAGhC7L,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIgD,GAAI,EAAG/C,GAAI,EAAEnC,UAC9BF,EAAAA,EAAAA,MAACgC,EAAAA,EAAK,CACJqD,UAAW,EACXjF,GAAI,CACFM,EAAG,EACHL,aAAc,EACdS,QAASjL,EAAM4J,QAAQG,KAAKmB,MAC5BC,MAAOnL,EAAM4J,QAAQG,KAAKqB,aAC1BqE,UAAW,SACXnE,OAAQ,OACRR,QAAS,OACT4E,cAAe,SACfC,eAAgB,UAChBtF,SAAA,EAEF7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,KAAKnB,GAAI,CAAEoB,WAAY,IAAKhB,GAAI,GAAIN,SACrDlI,MAEH3D,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAOrB,SAAC,0BAGhC7L,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIgD,GAAI,EAAG/C,GAAI,EAAEnC,UAC9BF,EAAAA,EAAAA,MAACgC,EAAAA,EAAK,CACJqD,UAAW,EACXjF,GAAI,CACFM,EAAG,EACHL,aAAc,EACdS,QAASjL,EAAM4J,QAAQI,QAAQkB,MAC/BC,MAAOnL,EAAM4J,QAAQI,QAAQoB,aAC7BqE,UAAW,SACXnE,OAAQ,OACRR,QAAS,OACT4E,cAAe,SACfC,eAAgB,UAChBtF,SAAA,EAEF7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,KAAKnB,GAAI,CAAEoB,WAAY,IAAKhB,GAAI,GAAIN,SACrDhI,MAEH7D,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAOrB,SAAC,uBAGhC7L,EAAAA,EAAAA,KAAC4N,EAAAA,EAAI,CAACL,MAAI,EAACQ,GAAI,GAAIgD,GAAI,EAAG/C,GAAI,EAAEnC,UAC9BF,EAAAA,EAAAA,MAACgC,EAAAA,EAAK,CACJqD,UAAW,EACXjF,GAAI,CACFM,EAAG,EACHL,aAAc,EACdS,QAASjL,EAAM4J,QAAQgG,QAAQ1E,MAC/BC,MAAOnL,EAAM4J,QAAQgG,QAAQxE,aAC7BqE,UAAW,SACXnE,OAAQ,OACRR,QAAS,OACT4E,cAAe,SACfC,eAAgB,UAChBtF,SAAA,EAEFF,EAAAA,EAAAA,MAACsB,EAAAA,EAAU,CAACC,QAAQ,KAAKnB,GAAI,CAAEoB,WAAY,IAAKhB,GAAI,GAAIN,SAAA,CAAC,SACrD9H,GAAiByG,QAAQ,OAE7BxK,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAOrB,SAAC,iCAOnC9J,GACC4J,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEI,GAAI,GAAIN,SAAA,EACjB7L,EAAAA,EAAAA,KAACqR,EAAAA,EAAc,KAEfrR,EAAAA,EAAAA,KAACsR,EAAAA,EAAc,CAAAzF,UACbF,EAAAA,EAAAA,MAAC4F,EAAAA,EAAK,CAAA1F,SAAA,EACJ7L,EAAAA,EAAAA,KAACwR,EAAAA,EAAS,CAAA3F,UACRF,EAAAA,EAAAA,MAAC8F,EAAAA,EAAQ,CAAA5F,SAAA,EACP7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,QAAStB,SAAC,mBACvC7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,UAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,eAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,kBAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,uBAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,SAAUpF,SAAC,0BAC3D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,kBAGhE7L,EAAAA,EAAAA,KAAC2R,EAAAA,EAAS,CAAA9F,SACP,IAAI3C,MAAM,IAAI/H,KAAI,CAACyQ,EAAGC,KACrBlG,EAAAA,EAAAA,MAAC8F,EAAAA,EAAQ,CAAA5F,SAAA,EACP7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAA7F,UACRF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEO,QAAS,OAAQC,WAAY,UAAWV,SAAA,EACjD7L,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,WAAWL,MAAO,GAAIC,OAAQ,GAAIf,GAAI,CAAEgB,GAAI,QAC9D/M,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,OAAOL,MAAO,YAGpC7M,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UAAC7L,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,OAAOL,MAAO,QAC1D7M,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UAAC7L,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,OAAOL,MAAO,QAC1D7M,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UAAC7L,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,OAAOL,MAAO,QAC1D7M,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UAAC7L,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,OAAOL,MAAO,QAC1D7M,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,QAAOlG,UAAC7L,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,OAAOL,MAAO,QACzD7M,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UAAC7L,EAAAA,EAAAA,KAAC8R,EAAAA,EAAQ,CAAC5E,QAAQ,UAAUL,MAAO,GAAIC,OAAQ,SAZ5D+E,eAmBD,IAAtBnP,GAAWpB,QACbtB,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAACG,GAAI,CAAEkF,UAAW,SAAU5E,EAAG,EAAGI,QAAS,mBAAoBT,aAAc,GAAIH,UACnF7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQP,MAAM,iBAAgBd,SAAC,iEAKrDF,EAAAA,EAAAA,MAAC2F,EAAAA,EAAc,CAAAzF,SAAA,EACbF,EAAAA,EAAAA,MAAC4F,EAAAA,EAAK,CAAA1F,SAAA,EACJ7L,EAAAA,EAAAA,KAACwR,EAAAA,EAAS,CAAA3F,UACRF,EAAAA,EAAAA,MAAC8F,EAAAA,EAAQ,CAAA5F,SAAA,EACP7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,QAAStB,SAAC,mBACvC7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,UAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,eAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,kBAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,uBAC5D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,SAAUpF,SAAC,0BAC3D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAC3F,GAAI,CAAEoB,WAAY,OAAQ8D,UAAW,UAAWpF,SAAC,qBAGhE7L,EAAAA,EAAAA,KAAC2R,EAAAA,EAAS,CAAA9F,SACkB,IAAzBZ,GAAc3J,QACbtB,EAAAA,EAAAA,KAACyR,EAAAA,EAAQ,CAAA5F,UACP7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACM,QAAS,EAAGD,MAAM,SAAQlG,UACnC7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQP,MAAM,iBAAgBd,SAAC,kCAMvDZ,GAAc9J,KAAKwD,IAAO,IAAAsN,EAAA,OACxBtG,EAAAA,EAAAA,MAAC8F,EAAAA,EAAQ,CAEP1F,GAAI,CAAE,UAAW,CAAEU,QAAS,qBAC5Ba,QAASA,IA/WN3I,KACvBO,QAAQO,IAAI,8BAA+Bd,GAEG,oBAAzCA,EAAQyF,aAAezF,EAAQ7D,MAElCY,EAAS,gBAAgBiD,EAAQ1D,IAAM0D,EAAQvE,qBACtCuE,EAAQvD,gBAEjBM,EAAS,8BAA8BiD,EAAQ1D,IAAM0D,EAAQvE,aAG7DyC,GAAY,CACVC,MAAM,EACNC,QAAS,8CACTC,SAAU,QAEd,EA+VmCkP,CAAgBvN,GAC/BwN,MAAO,CAAEC,OAAQ,WAAYvG,SAAA,EAE7B7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAAA7F,UACRF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEO,QAAS,OAAQC,WAAY,UAAWV,SAAA,EACjD7L,EAAAA,EAAAA,KAACwM,EAAAA,EAAM,CACLT,GAAI,CACFc,MAAO,GAAIC,OAAQ,GAAIC,GAAI,IAC3BN,QAAStB,GAAaxG,EAAQyF,aAAezF,EAAQ7D,OACrD+K,UAEkB,QAAnBoG,EAAAtN,EAAQwF,mBAAW,IAAA8H,OAAA,EAAnBA,EAAqBI,OAAO,KAAM,OAErC1G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACF7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQC,WAAY,IAAItB,SACzClH,EAAQwF,cAEVxF,EAAQvD,kBACPpB,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,UAAUP,MAAM,iBAAgBd,SAAC,wCAO7D7L,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UACvB7L,EAAAA,EAAAA,KAACsS,EAAAA,EAAI,CACHpE,MAAOvJ,EAAQyF,aAAezF,EAAQ7D,KACtCkI,KAAK,QACL+C,GAAI,CACFC,aAAc,OACdmB,WAAY,IACZV,QAAS,GAAGtB,GAAaxG,EAAQyF,aAAezF,EAAQ7D,UACxD6L,MAAOxB,GAAaxG,EAAQyF,aAAezF,EAAQ7D,YAIzDd,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UACvBF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEO,QAAS,OAAQC,WAAY,SAAU4E,eAAgB,UAAWtF,SAAA,EAC3E7L,EAAAA,EAAAA,KAACuS,EAAQ,CAACxG,GAAI,CAAEY,MAAOnL,EAAM4J,QAAQG,KAAKD,KAAMkH,SAAU,GAAIzF,GAAI,OAClE/M,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQC,WAAY,IAAItB,SACzClH,EAAQ0F,iBAIfrK,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UACvB7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQC,WAAY,IAAItB,SACzClH,EAAQd,iBAGb7D,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UACvB7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQC,WAAY,IAAItB,SACzClH,EAAQuC,qBAGblH,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,QAAOlG,UACtBF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACG,GAAI,CAAEO,QAAS,OAAQC,WAAY,SAAU4E,eAAgB,YAAatF,SAAA,EAC7E7L,EAAAA,EAAAA,KAACyS,EAAAA,EAAS,CAAC1G,GAAI,CAAEY,MAAOnL,EAAM4J,QAAQgG,QAAQ9F,KAAMkH,SAAU,GAAIzF,GAAI,OACtE/M,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,QAAQC,WAAY,IAAItB,SACzClH,EAAQZ,iBAAiByG,QAAQ,WAIxCxK,EAAAA,EAAAA,KAAC0R,EAAAA,EAAS,CAACK,MAAM,SAAQlG,UACvB7L,EAAAA,EAAAA,KAAC0S,EAAAA,EAAO,CACNC,OACEhH,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACF7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,UAAUC,WAAY,IAAItB,SAAC,yBAC/C7L,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAACG,GAAI,CAAE6G,GAAI,IAAM/G,UACnBF,EAAAA,EAAAA,MAACsB,EAAAA,EAAU,CAACC,QAAQ,UAASrB,SAAA,CAAC,UAAGlH,EAAQ4F,eAAe,0BAE1DvK,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAAC,UACFF,EAAAA,EAAAA,MAACsB,EAAAA,EAAU,CAACC,QAAQ,UAASrB,SAAA,CAAC,gBAAIlH,EAAQ8F,cAAc,yBAE1DzK,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAAAC,UACFF,EAAAA,EAAAA,MAACsB,EAAAA,EAAU,CAACC,QAAQ,UAASrB,SAAA,CAAC,gBAAIlH,EAAQ+F,cAAc,2BAI9DmI,OAAK,EAAAhH,UAEL7L,EAAAA,EAAAA,KAACsS,EAAAA,EAAI,CACHQ,MAAM9S,EAAAA,EAAAA,KAAC+S,EAAc,CAAChH,GAAI,CAAEyG,SAAU,MACtCtE,MAAO,SAAIvJ,EAAQ8F,gBACnBkC,MAAO/D,WAAWjE,EAAQ8F,eAAiB,IAAO,UAAY,UAC9DzB,KAAK,QACL+C,GAAI,CACFC,aAAc,OACdmB,WAAY,IACZ6F,SAAU,gBA3FbrO,EAAQvE,UAgGJ,UAKnBJ,EAAAA,EAAAA,KAACiT,EAAAA,EAAe,CACdC,mBAAoB,CAAC,GAAI,GAAI,IAC7BC,UAAU,MACVtJ,MAAOiB,GAAaxJ,OACpB6B,YAAaA,GACbF,KAAMA,GACNmQ,aAxjBWC,CAACC,EAAOC,KAC/BrQ,GAAQqQ,EAAQ,EAwjBJC,oBArjBmBF,IAC/BlQ,GAAe0G,SAASwJ,EAAM9E,OAAOH,MAAO,KAC5CnL,GAAQ,EAAE,aA2jBRlD,EAAAA,EAAAA,KAACyT,EAAAA,EAAQ,CACP3Q,KAAMF,GAASE,KACf4Q,iBAAkB,IAClBC,QAASA,IAAM9Q,GAAY,IAAKD,GAAUE,MAAM,IAChD8Q,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAAWjI,UAE3D7L,EAAAA,EAAAA,KAAC+T,EAAAA,EAAK,CACJJ,QAASA,IAAM9Q,GAAY,IAAKD,GAAUE,MAAM,IAChDE,SAAUJ,GAASI,SACnB+I,GAAI,CAAEc,MAAO,QAAShB,SAErBjJ,GAASG,gBA7cd/C,EAAAA,EAAAA,KAAC4L,EAAAA,EAAG,CAACG,GAAI,CAAEM,EAAG,EAAG4E,UAAW,UAAWpF,UACrC7L,EAAAA,EAAAA,KAACiN,EAAAA,EAAU,CAACC,QAAQ,KAAKP,MAAM,QAAOd,SAAC,+DAid/C,C","sources":["../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/AttachMoney.js","../node_modules/@mui/icons-material/esm/WorkOutline.js","../node_modules/@mui/icons-material/esm/TrendingUp.js","components/reports/ManagerPerformanceReport.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4\"\n}), 'AttachMoney');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M14 6V4h-4v2zM4 8v11h16V8zm16-2c1.11 0 2 .89 2 2v11c0 1.11-.89 2-2 2H4c-1.11 0-2-.89-2-2l.01-11c0-1.11.88-2 1.99-2h4V4c0-1.11.89-2 2-2h4c1.11 0 2 .89 2 2v2z\"\n}), 'WorkOutline');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"m16 6 2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"\n}), 'TrendingUp');","import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box, Typography, TextField, InputAdornment, Button, Card, CardContent, \n  Avatar, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, \n  TablePagination, useTheme, Snackbar, Alert, LinearProgress, Grid, FormControl, \n  InputLabel, Select, MenuItem, Paper, Divider, Chip, Skeleton, Tooltip\n} from '@mui/material';\nimport {\n  CalendarToday as CalendarIcon,\n  DateRange as DateRangeIcon,\n  Assessment as AssessmentIcon, \n  Person as PersonIcon,\n  People as PeopleIcon,\n  Store as StoreIcon,\n  Search as SearchIcon,\n  FileDownload as FileDownloadIcon,\n  FilterAlt as FilterIcon,\n  LocalMall as ProductIcon,\n  AttachMoney as MoneyIcon,\n  WorkOutline as TeamIcon,\n  TrendingUp as EfficiencyIcon\n} from '@mui/icons-material';\nimport { collection, query, where, getDocs, orderBy, getDoc, doc, Timestamp } from 'firebase/firestore';\nimport { db } from '../../services/firebase';\nimport { useAuth } from '../../context/AuthContext';\nimport { getSubordinateIds, canViewManagerPerformanceReport } from '../../utils/roles';\nimport { useNavigate, useLocation, useParams } from 'react-router-dom';\nimport { format, parseISO, isValid } from 'date-fns';\n\n// Helper function to format date\nconst formatDate = (timestamp) => {\n  if (!timestamp) return 'N/A';\n  \n  if (timestamp && typeof timestamp.toDate === 'function') {\n    return format(timestamp.toDate(), 'MMM d, yyyy');\n  }\n  \n  if (timestamp instanceof Date) {\n    return format(timestamp, 'MMM d, yyyy');\n  }\n  \n  try {\n    const date = new Date(timestamp);\n    if (isValid(date)) {\n      return format(date, 'MMM d, yyyy');\n    }\n  } catch (e) {\n    console.error(\"Error parsing date:\", e);\n  }\n  \n  return 'Invalid Date';\n};\n\n// Get all subordinates recursively for a manager\nconst getAllSubordinatesRecursively = (managerId, allUsers) => {\n  const directSubordinates = allUsers.filter(u => u.reportingToId === managerId);\n  \n  let allSubordinates = [...directSubordinates];\n  const marketingStaff = [];\n  \n  // For each direct subordinate, get their subordinates\n  directSubordinates.forEach(sub => {\n    if (sub.role === 'MarketingStaff') {\n      marketingStaff.push(sub);\n    } else {\n      // Recursively get deeper subordinates\n      const deeperSubs = getAllSubordinatesRecursively(sub.id, allUsers);\n      allSubordinates = [...allSubordinates, ...deeperSubs.allSubordinates];\n      marketingStaff.push(...deeperSubs.marketingStaff);\n    }\n  });\n  \n  return { \n    allSubordinates, \n    marketingStaff\n  };\n};\n\n// Get direct subordinates for a manager\nconst getDirectSubordinates = (managerId, allUsers) => {\n  // Find direct subordinates\n  const directSubordinates = allUsers.filter(u => u.reportingToId === managerId);\n  \n  // Count marketing staff under each direct subordinate\n  const enrichedSubordinates = directSubordinates.map(sub => {\n    // If this is a marketing staff, just return it\n    if (sub.role === 'MarketingStaff') {\n      return { \n        ...sub, \n        hasSubordinates: false,\n        marketingStaffCount: 0 \n      };\n    }\n    \n    // Otherwise, count marketing staff under it\n    const { marketingStaff } = getAllSubordinatesRecursively(sub.id, allUsers);\n    return { \n      ...sub, \n      hasSubordinates: true,\n      marketingStaffCount: marketingStaff.length \n    };\n  });\n  \n  return enrichedSubordinates;\n};\n\nexport default function ManagerPerformanceReport() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { managerId } = useParams();\n  const { userProfile, allUsers, loading: authLoading } = useAuth();\n  \n  // State\n  const [loading, setLoading] = useState(false);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [reportData, setReportData] = useState([]);\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [currentManager, setCurrentManager] = useState(null);\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  \n  // Summary statistics\n  const [totalManagers, setTotalManagers] = useState(0);\n  const [totalMarketingStaff, setTotalMarketingStaff] = useState(0);\n  const [totalVisits, setTotalVisits] = useState(0);\n  const [totalSalesAmount, setTotalSalesAmount] = useState(0);\n\n  // Initialize with current month date range\n  useEffect(() => {\n    const today = new Date();\n    const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n    const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    \n    setStartDate(firstDay.toISOString().split('T')[0]);\n    setEndDate(lastDay.toISOString().split('T')[0]);\n  }, []);\n\n  // Effect to set current manager from URL or session storage\n  useEffect(() => {\n    const setupManager = async () => {\n      if (managerId) {\n        try {\n          // Get manager from allUsers\n          const manager = allUsers.find(u => u.id === managerId);\n          if (manager) {\n            setCurrentManager(manager);\n            \n            // Build breadcrumb path\n            const breadcrumbPath = [];\n            let currentId = manager.id;\n            let current = manager;\n            \n            while (current) {\n              breadcrumbPath.unshift(current);\n              if (!current.reportingToId) break;\n              current = allUsers.find(u => u.id === current.reportingToId);\n            }\n            \n            setBreadcrumbs(breadcrumbPath);\n          } else {\n            // If can't find manager, check if we can view root level\n            const rootLevelPermitted = checkRootLevelPermission();\n            if (rootLevelPermitted) {\n              // Set to root view\n              setCurrentManager(null);\n              setBreadcrumbs([]);\n            } else {\n              setSnackbar({\n                open: true,\n                message: 'Manager not found or you do not have permission to view',\n                severity: 'error'\n              });\n              navigate('/sales/manager-performance');\n            }\n          }\n        } catch (error) {\n          console.error(\"Error setting up manager:\", error);\n        }\n      } else {\n        // Root level - check permission\n        const rootLevelPermitted = checkRootLevelPermission();\n        if (rootLevelPermitted) {\n          setCurrentManager(null);\n          setBreadcrumbs([]);\n        } else {\n          // Not permitted to view root level, try to find user's own position\n          const myId = userProfile?.id;\n          if (myId) {\n            const me = allUsers.find(u => u.id === myId);\n            if (me) {\n              setCurrentManager(me);\n              setBreadcrumbs([me]);\n              navigate(`/sales/manager-performance/${myId}`);\n            }\n          }\n        }\n      }\n    };\n    \n    if (allUsers && allUsers.length > 0 && userProfile) {\n      setupManager();\n    }\n  }, [managerId, allUsers, userProfile, navigate]);\n\n  // Check if user can view the root level\n  const checkRootLevelPermission = () => {\n    if (!userProfile) return false;\n    \n    // Admin and National Managers can view root level\n    return ['Admin', 'NationalManager'].includes(userProfile.role);\n  };\n  \n  // Get accessible managers based on current view\n  const accessibleManagers = useMemo(() => {\n    if (!userProfile || !allUsers) return [];\n    console.log(\"Current view:\", currentManager ? `Manager ${currentManager.id}` : \"Root level\");\n    \n    // If viewing a specific manager, return direct subordinates\n    if (currentManager) {\n      // Get direct subordinates of this manager\n      const subordinates = getDirectSubordinates(currentManager.id, allUsers);\n      console.log(`Found ${subordinates.length} direct subordinates for manager ${currentManager.id}`);\n      return subordinates;\n    }\n    \n    // Top level view logic based on role\n    if (userProfile.role === 'Admin') {\n      // For Admin at top level: show ONLY National Managers\n      const managersList = allUsers.filter(u => \n        u.role === 'NationalManager' && u.active\n      );\n      \n      // Enrich with subordinate info\n      const enriched = managersList.map(manager => {\n        const subResult = getAllSubordinatesRecursively(manager.id, allUsers);\n        return {\n          ...manager,\n          hasSubordinates: subResult.allSubordinates.length > 0,\n          marketingStaffCount: subResult.marketingStaff.length\n        };\n      });\n      \n      console.log(`Admin view: found ${enriched.length} National Managers`);\n      return enriched;\n    }\n\n    // National Manager can see their direct subordinates\n    if (userProfile.role === 'NationalManager') {\n      const subs = getDirectSubordinates(userProfile.id, allUsers);\n      console.log(`National Manager view: found ${subs.length} subordinates`);\n      return subs;\n    }\n\n    // Area Officer can see their direct subordinates\n    if (userProfile.role === 'AreaOfficer') {\n      const subs = getDirectSubordinates(userProfile.id, allUsers);\n      console.log(`Area Officer view: found ${subs.length} subordinates`);\n      return subs;\n    }\n\n    // Supervisor can only see their direct subordinates (marketing staff)\n    if (userProfile.role === 'Supervisor') {\n      const subs = getDirectSubordinates(userProfile.id, allUsers);\n      console.log(`Supervisor view: found ${subs.length} subordinates`);\n      return subs;\n    }\n\n    console.log(\"No accessible managers found for role:\", userProfile.role);\n    return [];\n  }, [userProfile, allUsers, currentManager]);\n\n  // Simplify to directly use accessibleManagers without filtering by role\n  const filteredManagers = useMemo(() => {\n    if (!searchTerm.trim()) return accessibleManagers;\n    \n    // Apply search filter\n    const searchLower = searchTerm.toLowerCase();\n    return accessibleManagers.filter(manager => \n      manager.name?.toLowerCase().includes(searchLower)\n    );\n  }, [accessibleManagers, searchTerm]);\n\n  // Auto-generate report after initialization with slight delay\n  useEffect(() => {\n    if (startDate && endDate && !loading && allUsers?.length > 0 && accessibleManagers?.length > 0) {\n      // Add a short delay to ensure state updates are complete\n      const timer = setTimeout(() => {\n        console.log(\"Generating report with managers:\", accessibleManagers.length);\n        generateReport();\n      }, 300);\n      return () => clearTimeout(timer);\n    }\n  }, [startDate, endDate, allUsers, accessibleManagers]);\n\n  // Generate the consolidated report\n  const generateReport = async () => {\n    if (!startDate || !endDate) {\n      setSnackbar({\n        open: true,\n        message: 'Please select a date range',\n        severity: 'warning'\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      // Create date range for query\n      const startTimestamp = new Date(startDate + 'T00:00:00');\n      const endTimestamp = new Date(endDate + 'T23:59:59');\n\n      // Make sure we have managers to report on\n      if (filteredManagers.length === 0) {\n        console.log(\"No managers found with selected criteria\", {\n          userRole: userProfile?.role,\n          currentManagerId: currentManager?.id\n        });\n        \n        setReportData([]);\n        setSnackbar({\n          open: true,\n          message: userProfile?.role === 'Admin' ? \n            'No managers found in the system. Please add staff with management roles first.' : \n            'No subordinate managers found for your account.',\n          severity: 'info'\n        });\n        setLoading(false);\n        return;\n      }\n      \n      console.log(`Generating report for ${filteredManagers.length} managers`, filteredManagers);\n      \n      // Data structures to track team performance\n      const managerMetrics = [];\n      let globalTotalVisits = 0;\n      let globalTotalMarketingStaff = 0;\n      let globalTotalSalesAmount = 0;\n      \n      // For each manager, get performance metrics\n      for (const manager of filteredManagers) {\n        let marketingStaff = [];\n        \n        // If this is a marketing staff, just count them\n        if (manager.role === 'MarketingStaff') {\n          marketingStaff = [manager];\n        } else {\n          // Otherwise, get marketing staff under them\n          const result = getAllSubordinatesRecursively(manager.id, allUsers);\n          marketingStaff = result.marketingStaff;\n        }\n        \n        // Always add the manager, even with zero metrics\n        let teamVisits = 0;\n        let uniqueRetailers = new Set();\n        let teamTotalProducts = 0;\n        let teamTotalSalesAmount = 0;\n        \n        // Only query visits if we have marketing staff\n        if (marketingStaff.length > 0) {\n          const staffIds = marketingStaff.map(staff => staff.id);\n          globalTotalMarketingStaff += marketingStaff.length;\n          \n          // Query all visits for these marketing staff within date range\n          const visitsQuery = query(\n            collection(db, 'visits'),\n            where('checkInTime', '>=', startTimestamp),\n            where('checkInTime', '<=', endTimestamp),\n            orderBy('checkInTime', 'desc')\n          );\n          \n          const visitsSnapshot = await getDocs(visitsQuery);\n          let visitsData = visitsSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          }));\n          \n          // Filter for visits by this manager's marketing staff\n          visitsData = visitsData.filter(visit => staffIds.includes(visit.userId));\n          \n          // Count metrics\n          teamVisits = visitsData.length;\n          globalTotalVisits += teamVisits;\n          \n          // Count unique retailers\n          visitsData.forEach(visit => {\n            if (visit.retailerId) uniqueRetailers.add(visit.retailerId);\n          });\n          \n          // Fetch product rates for pricing\n          const productRatesQuery = query(collection(db, 'productRates'));\n          const productRatesSnapshot = await getDocs(productRatesQuery);\n          const productRatesMap = {};\n          \n          productRatesSnapshot.forEach(doc => {\n            const data = doc.data();\n            if (data.productId && data.rate) {\n              productRatesMap[data.productId] = parseFloat(data.rate);\n            }\n          });\n          \n          // Fetch inventory entries for pricing data\n          const inventoryEntryIds = new Set();\n          visitsData.forEach(visit => {\n            if (visit.inventoryEntryId) {\n              inventoryEntryIds.add(visit.inventoryEntryId);\n            }\n          });\n          \n          const inventoryEntriesMap = {};\n          if (inventoryEntryIds.size > 0) {\n            const inventoryPromises = Array.from(inventoryEntryIds).map(async (entryId) => {\n              try {\n                const entryDoc = await getDoc(doc(db, 'inventoryEntries', entryId));\n                if (entryDoc.exists()) {\n                  inventoryEntriesMap[entryId] = entryDoc.data();\n                }\n              } catch (error) {\n                console.error(`Error fetching inventory entry ${entryId}:`, error);\n              }\n            });\n            \n            await Promise.all(inventoryPromises);\n          }\n          \n          // Calculate products and sales amount\n          for (const visit of visitsData) {\n            if (Array.isArray(visit.products)) {\n              for (const product of visit.products) {\n                const count = parseInt(product.count) || 0;\n                teamTotalProducts += count;\n                \n                // Try to find rate in different sources\n                let rate = null;\n                \n                // 1. Check product itself\n                if (product.rate) {\n                  rate = parseFloat(product.rate);\n                } \n                // 2. Check inventory entry\n                else if (visit.inventoryEntryId && inventoryEntriesMap[visit.inventoryEntryId]) {\n                  const inventoryEntry = inventoryEntriesMap[visit.inventoryEntryId];\n                  const productEntry = inventoryEntry.productEntries?.find(pe => pe.productId === product.productId);\n                  if (productEntry && productEntry.rate) {\n                    rate = parseFloat(productEntry.rate);\n                  }\n                }\n                // 3. Check global product rates\n                if (rate === null && productRatesMap[product.productId]) {\n                  rate = productRatesMap[product.productId];\n                }\n                \n                // Calculate amount if we have a rate\n                if (rate !== null) {\n                  const saleAmount = count * rate;\n                  teamTotalSalesAmount += saleAmount;\n                }\n              }\n            }\n          }\n          \n          globalTotalSalesAmount += teamTotalSalesAmount;\n        }\n        \n        // Add manager metrics\n        managerMetrics.push({\n          id: manager.id,\n          managerId: manager.id,\n          managerName: manager.name || \"Unknown\",\n          managerRole: manager.role,\n          teamSize: marketingStaff.length,\n          totalVisits: teamVisits,\n          uniqueRetailers: uniqueRetailers.size,\n          totalProducts: teamTotalProducts,\n          totalSalesAmount: teamTotalSalesAmount,\n          hasSubordinates: manager.hasSubordinates || false,\n          // Efficiency metrics\n          visitsPerStaff: marketingStaff.length ? (teamVisits / marketingStaff.length).toFixed(1) : 0,\n          salesPerStaff: marketingStaff.length ? (teamTotalSalesAmount / marketingStaff.length).toFixed(2) : 0,\n          salesPerVisit: teamVisits ? (teamTotalSalesAmount / teamVisits).toFixed(2) : 0\n        });\n      }\n      \n      // Update summary statistics\n      setTotalManagers(managerMetrics.length);\n      setTotalMarketingStaff(globalTotalMarketingStaff);\n      setTotalVisits(globalTotalVisits);\n      setTotalSalesAmount(globalTotalSalesAmount);\n      \n      // Sort by total sales amount (descending)\n      managerMetrics.sort((a, b) => b.totalSalesAmount - a.totalSalesAmount);\n      \n      // Set report data\n      setReportData(managerMetrics);\n      \n      // Show message if no data\n      if (managerMetrics.length === 0) {\n        setSnackbar({\n          open: true,\n          message: 'No staff performance data found',\n          severity: 'info'\n        });\n      }\n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n      setSnackbar({\n        open: true,\n        message: 'Error generating report: ' + error.message,\n        severity: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchTerm.trim()) return reportData;\n    \n    const searchLower = searchTerm.toLowerCase();\n    return reportData.filter(manager => \n      (manager.managerName?.toLowerCase().includes(searchLower) || manager.name?.toLowerCase().includes(searchLower))\n    );\n  }, [reportData, searchTerm]);\n\n  // Pagination handlers\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Display rows with pagination\n  const displayedRows = filteredData.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage\n  );\n\n  // Export to CSV\n  const exportToCSV = () => {\n    if (reportData.length === 0) {\n      setSnackbar({\n        open: true,\n        message: 'No data to export',\n        severity: 'warning'\n      });\n      return;\n    }\n    \n    // Define headers\n    const headers = [\n      'Manager Name',\n      'Role',\n      'Team Size',\n      'Total Visits',\n      'Unique Retailers',\n      'Total Products',\n      'Total Sales Amount',\n      'Visits Per Staff',\n      'Sales Per Staff',\n      'Sales Per Visit'\n    ];\n    \n    // Create rows\n    const rows = reportData.map(manager => [\n      manager.managerName,\n      manager.managerRole,\n      manager.teamSize,\n      manager.totalVisits,\n      manager.uniqueRetailers,\n      manager.totalProducts,\n      manager.totalSalesAmount.toFixed(2),\n      manager.visitsPerStaff,\n      manager.salesPerStaff,\n      manager.salesPerVisit\n    ]);\n    \n    // Create CSV content\n    let csvContent = headers.join(',') + '\\n';\n    rows.forEach(row => {\n      const processedRow = row.map(field => {\n        // Quote fields with commas\n        if (typeof field === 'string' && (field.includes(',') || field.includes('\"'))) {\n          return `\"${field.replace(/\"/g, '\"\"')}\"`;\n        }\n        return field;\n      });\n      csvContent += processedRow.join(',') + '\\n';\n    });\n    \n    // Add report title and date range\n    csvContent = `Staff Performance Report\\nDate Range: ${startDate} to ${endDate}\\n\\n` + csvContent;\n    \n    // Create and download the file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', `manager_performance_${startDate}_${endDate}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Helper function to get role color\n  const getRoleColor = (role) => {\n    switch (role) {\n      case 'NationalManager':\n        return theme.palette.primary.main;\n      case 'AreaOfficer':\n        return theme.palette.info.main;\n      case 'Supervisor':\n        return theme.palette.warning.main;\n      default:\n        return theme.palette.grey[500];\n    }\n  };\n\n  // Handle drilling down into a subordinate\n  const handleDrillDown = (manager) => {\n    console.log(\"Drilling down into manager:\", manager);\n    \n    if ((manager.managerRole || manager.role) === 'MarketingStaff') {\n      // For marketing staff, go to their detailed report\n      navigate(`/sales/staff/${manager.id || manager.managerId}/details`);\n    } else if (manager.hasSubordinates) {\n      // For managers with subordinates, navigate to their subordinates view\n      navigate(`/sales/manager-performance/${manager.id || manager.managerId}`);\n    } else {\n      // For managers without subordinates, show message\n      setSnackbar({\n        open: true,\n        message: 'This manager has no subordinates to display',\n        severity: 'info'\n      });\n    }\n  };\n\n  // Handle navigate up in the hierarchy\n  const handleNavigateUp = (manager) => {\n    if (manager && manager.id) {\n      navigate(`/sales/manager-performance/${manager.id}`);\n    } else {\n      navigate(`/sales/manager-performance`);\n    }\n  };\n\n  // Check if user has permission to view this report\n  if (!canViewManagerPerformanceReport(userProfile)) {\n    return (\n      <Box sx={{ p: 4, textAlign: 'center' }}>\n        <Typography variant=\"h6\" color=\"error\">\n          You are not authorized to view staff performance reports.\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Card sx={{ borderRadius: 2, boxShadow: theme.shadows[2], mb: 4 }}>\n        <CardContent sx={{ p: 3 }}>\n          {/* Header */}\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n            <Avatar\n              sx={{\n                bgcolor: theme.palette.primary.light,\n                color: theme.palette.primary.contrastText || '#fff',\n                width: 48,\n                height: 48,\n                mr: 2,\n              }}\n            >\n              <PeopleIcon />\n            </Avatar>\n            <Box>\n              <Typography variant=\"h5\" fontWeight=\"bold\" color=\"text.primary\">\n                {currentManager ? `${currentManager.name}'s Team Performance` : 'Staff Performance Report'}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {currentManager \n                  ? `Performance metrics of ${currentManager.name}'s direct subordinates` \n                  : 'Performance metrics of managers based on their teams'}\n              </Typography>\n            </Box>\n          </Box>\n\n          {/* Breadcrumb Navigation */}\n          {breadcrumbs.length > 0 && (\n            <Box sx={{ mb: 3, display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>\n              <Button \n                variant=\"text\" \n                size=\"small\" \n                onClick={() => navigate('/sales/manager-performance')}\n                sx={{ mr: 1 }}\n              >\n                Home\n              </Button>\n              {breadcrumbs.map((item, index) => (\n                <React.Fragment key={item.id}>\n                  <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mx: 0.5 }}>\n                    &gt;\n                  </Typography>\n                  {index === breadcrumbs.length - 1 ? (\n                    <Typography variant=\"body2\" color=\"primary\" fontWeight=\"medium\">\n                      {item.name}\n                    </Typography>\n                  ) : (\n                    <Button \n                      variant=\"text\" \n                      size=\"small\" \n                      onClick={() => handleNavigateUp(item)}\n                      sx={{ mr: 1 }}\n                    >\n                      {item.name}\n                    </Button>\n                  )}\n                </React.Fragment>\n              ))}\n            </Box>\n          )}\n\n          {/* Info box explaining drill-down functionality */}\n          <Paper sx={{ p: 2, mb: 3, borderRadius: 2, bgcolor: theme.palette.info.light, color: theme.palette.info.contrastText }}>\n            <Typography variant=\"body2\" fontWeight={500}>\n              <strong>How to use:</strong> Click on any manager row to drill down and see their subordinates' performance.\n              {currentManager ? \" Use the breadcrumb navigation above to go back up the hierarchy.\" : \"\"}\n            </Typography>\n          </Paper>\n\n          {/* Filters */}\n          <Paper sx={{ p: 2, mb: 4, borderRadius: 2 }}>\n            <Grid container spacing={2} alignItems=\"center\">\n              <Grid item xs={12} md={4}>\n                <TextField\n                  label=\"Search Manager\"\n                  type=\"text\"\n                  size=\"small\"\n                  fullWidth\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <SearchIcon sx={{ color: theme.palette.primary.main }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\n                />\n              </Grid>\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Start Date\"\n                  type=\"date\"\n                  size=\"small\"\n                  fullWidth\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <CalendarIcon sx={{ color: theme.palette.primary.main }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\n                />\n              </Grid>\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"End Date\"\n                  type=\"date\"\n                  size=\"small\"\n                  fullWidth\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <DateRangeIcon sx={{ color: theme.palette.primary.main }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\n                />\n              </Grid>\n              <Grid item xs={12} md={2}>\n                <Box sx={{ display: 'flex', gap: 1 }}>\n                  <Button\n                    variant=\"contained\"\n                    onClick={generateReport}\n                    disabled={loading}\n                    startIcon={<FilterIcon />}\n                    sx={{\n                      borderRadius: '2rem',\n                      bgcolor: theme.palette.primary.main,\n                      '&:hover': { bgcolor: theme.palette.primary.dark }\n                    }}\n                  >\n                    Apply Filters\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={exportToCSV}\n                    disabled={loading || reportData.length === 0}\n                    startIcon={<FileDownloadIcon />}\n                    sx={{\n                      borderRadius: '2rem',\n                      borderColor: theme.palette.primary.main,\n                      color: theme.palette.primary.main,\n                      '&:hover': { borderColor: theme.palette.primary.dark }\n                    }}\n                  >\n                    Export CSV\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </Paper>\n\n          {/* Summary Cards */}\n          <Box sx={{ mb: 4 }}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.primary.light,\n                    color: theme.palette.primary.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    {totalManagers}\n                  </Typography>\n                  <Typography variant=\"body1\">Active Managers</Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.info.light,\n                    color: theme.palette.info.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    {totalMarketingStaff}\n                  </Typography>\n                  <Typography variant=\"body1\">Marketing Staff</Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.warning.light,\n                    color: theme.palette.warning.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    {totalVisits}\n                  </Typography>\n                  <Typography variant=\"body1\">Total Visits</Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.success.light,\n                    color: theme.palette.success.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    ₹{totalSalesAmount.toFixed(2)}\n                  </Typography>\n                  <Typography variant=\"body1\">Total Sales Amount</Typography>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Box>\n\n          {/* Results Table */}\n          {loading ? (\n            <Box sx={{ mb: 2 }}>\n              <LinearProgress />\n              {/* Skeleton placeholders for table */}\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Manager/Staff</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Role</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Team Size</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Total Visits</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Retailers Reached</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'right' }}>Total Sales (₹)</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Actions</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {[...Array(5)].map((_, i) => (\n                      <TableRow key={i}>\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <Skeleton variant=\"circular\" width={36} height={36} sx={{ mr: 1.5 }} />\n                            <Skeleton variant=\"text\" width={120} />\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"text\" width={80} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"text\" width={60} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"text\" width={60} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"text\" width={60} /></TableCell>\n                        <TableCell align=\"right\"><Skeleton variant=\"text\" width={80} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"rounded\" width={80} height={24} /></TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          ) : reportData.length === 0 ? (\n            <Box sx={{ textAlign: 'center', p: 4, bgcolor: 'rgba(0,0,0,0.02)', borderRadius: 2 }}>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                No staff performance data found for the selected criteria\n              </Typography>\n            </Box>\n          ) : (\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontWeight: 'bold' }}>Manager/Staff</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Role</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Team Size</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Total Visits</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Retailers Reached</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'right' }}>Total Sales (₹)</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Efficiency</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {displayedRows.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} align=\"center\">\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          No matching results found\n                        </Typography>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    displayedRows.map((manager) => (\n                      <TableRow \n                        key={manager.managerId}\n                        sx={{ '&:hover': { bgcolor: 'rgba(0,0,0,0.04)' } }}\n                        onClick={() => handleDrillDown(manager)}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <Avatar \n                              sx={{ \n                                width: 36, height: 36, mr: 1.5,\n                                bgcolor: getRoleColor(manager.managerRole || manager.role) \n                              }}\n                            >\n                              {manager.managerName?.charAt(0) || '?'}\n                            </Avatar>\n                            <Box>\n                              <Typography variant=\"body2\" fontWeight={500}>\n                                {manager.managerName}\n                              </Typography>\n                              {manager.hasSubordinates && (\n                                <Typography variant=\"caption\" color=\"text.secondary\">\n                                  Click to view subordinates\n                                </Typography>\n                              )}\n                            </Box>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Chip \n                            label={manager.managerRole || manager.role} \n                            size=\"small\"\n                            sx={{ \n                              borderRadius: '14px', \n                              fontWeight: 500,\n                              bgcolor: `${getRoleColor(manager.managerRole || manager.role)}20`,\n                              color: getRoleColor(manager.managerRole || manager.role)\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                            <TeamIcon sx={{ color: theme.palette.info.main, fontSize: 16, mr: 0.5 }} />\n                            <Typography variant=\"body2\" fontWeight={500}>\n                              {manager.teamSize}\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Typography variant=\"body2\" fontWeight={500}>\n                            {manager.totalVisits}\n                          </Typography>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Typography variant=\"body2\" fontWeight={500}>\n                            {manager.uniqueRetailers}\n                          </Typography>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <MoneyIcon sx={{ color: theme.palette.success.main, fontSize: 18, mr: 0.5 }} />\n                            <Typography variant=\"body2\" fontWeight={500}>\n                              {manager.totalSalesAmount.toFixed(2)}\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Tooltip \n                            title={\n                              <Box>\n                                <Typography variant=\"caption\" fontWeight={600}>Efficiency Metrics:</Typography>\n                                <Box sx={{ mt: 0.5 }}>\n                                  <Typography variant=\"caption\">• {manager.visitsPerStaff} visits per staff</Typography>\n                                </Box>\n                                <Box>\n                                  <Typography variant=\"caption\">• ₹{manager.salesPerStaff} sales per staff</Typography>\n                                </Box>\n                                <Box>\n                                  <Typography variant=\"caption\">• ₹{manager.salesPerVisit} sales per visit</Typography>\n                                </Box>\n                              </Box>\n                            } \n                            arrow\n                          >\n                            <Chip \n                              icon={<EfficiencyIcon sx={{ fontSize: 16 }} />}\n                              label={`₹${manager.salesPerStaff}`}\n                              color={parseFloat(manager.salesPerStaff) > 1000 ? \"success\" : \"default\"}\n                              size=\"small\"\n                              sx={{ \n                                borderRadius: '14px', \n                                fontWeight: 500,\n                                minWidth: '80px'\n                              }}\n                            />\n                          </Tooltip>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n              <TablePagination\n                rowsPerPageOptions={[10, 25, 50]}\n                component=\"div\"\n                count={filteredData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </TableContainer>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Snackbar for notifications */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert \n          onClose={() => setSnackbar({ ...snackbar, open: false })} \n          severity={snackbar.severity}\n          sx={{ width: '100%' }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n} "],"names":["createSvgIcon","_jsx","d","fillRule","getAllSubordinatesRecursively","managerId","allUsers","directSubordinates","filter","u","reportingToId","allSubordinates","marketingStaff","forEach","sub","role","push","deeperSubs","id","getDirectSubordinates","map","hasSubordinates","marketingStaffCount","length","ManagerPerformanceReport","theme","useTheme","navigate","useNavigate","useLocation","useParams","userProfile","loading","authLoading","useAuth","setLoading","useState","startDate","setStartDate","endDate","setEndDate","searchTerm","setSearchTerm","reportData","setReportData","snackbar","setSnackbar","open","message","severity","page","setPage","rowsPerPage","setRowsPerPage","currentManager","setCurrentManager","breadcrumbs","setBreadcrumbs","totalManagers","setTotalManagers","totalMarketingStaff","setTotalMarketingStaff","totalVisits","setTotalVisits","totalSalesAmount","setTotalSalesAmount","useEffect","today","Date","firstDay","getFullYear","getMonth","lastDay","toISOString","split","async","manager","find","breadcrumbPath","current","unshift","checkRootLevelPermission","error","console","myId","me","setupManager","includes","accessibleManagers","useMemo","log","subordinates","enriched","active","subResult","subs","filteredManagers","trim","searchLower","toLowerCase","_manager$name","name","timer","setTimeout","generateReport","clearTimeout","startTimestamp","endTimestamp","userRole","currentManagerId","managerMetrics","globalTotalVisits","globalTotalMarketingStaff","globalTotalSalesAmount","teamVisits","uniqueRetailers","Set","teamTotalProducts","teamTotalSalesAmount","staffIds","staff","visitsQuery","query","collection","db","where","orderBy","visitsData","getDocs","docs","doc","data","visit","userId","retailerId","add","productRatesQuery","productRatesSnapshot","productRatesMap","productId","rate","parseFloat","inventoryEntryIds","inventoryEntryId","inventoryEntriesMap","size","inventoryPromises","Array","from","entryDoc","getDoc","entryId","exists","Promise","all","isArray","products","product","count","parseInt","_inventoryEntry$produ","productEntry","productEntries","pe","managerName","managerRole","teamSize","totalProducts","visitsPerStaff","toFixed","salesPerStaff","salesPerVisit","sort","a","b","filteredData","_manager$managerName","_manager$name2","displayedRows","slice","getRoleColor","palette","primary","main","info","warning","grey","canViewManagerPerformanceReport","_jsxs","Box","children","Card","sx","borderRadius","boxShadow","shadows","mb","CardContent","p","display","alignItems","Avatar","bgcolor","light","color","contrastText","width","height","mr","PeopleIcon","Typography","variant","fontWeight","flexWrap","Button","onClick","item","index","React","mx","Paper","Grid","container","spacing","xs","md","TextField","label","type","fullWidth","value","onChange","e","target","InputProps","startAdornment","InputAdornment","position","SearchIcon","InputLabelProps","shrink","CalendarIcon","DateRangeIcon","gap","disabled","startIcon","FilterIcon","dark","exportToCSV","rows","csvContent","join","row","processedRow","field","replace","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","FileDownloadIcon","borderColor","sm","elevation","textAlign","flexDirection","justifyContent","success","LinearProgress","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","_","i","Skeleton","align","colSpan","_manager$managerName2","handleDrillDown","style","cursor","charAt","Chip","TeamIcon","fontSize","MoneyIcon","Tooltip","title","mt","arrow","icon","EfficiencyIcon","minWidth","TablePagination","rowsPerPageOptions","component","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}