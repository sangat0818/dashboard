{"version":3,"file":"static/js/459.e2996388.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/FilterAlt.js","../node_modules/@mui/icons-material/esm/AttachMoney.js","../node_modules/@mui/icons-material/esm/LocalMall.js","components/reports/MarketingStaffPerformanceReport.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61\"\n}), 'FilterAlt');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4\"\n}), 'AttachMoney');","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 6h-2c0-2.76-2.24-5-5-5S7 3.24 7 6H5c-1.1 0-1.99.9-1.99 2L3 20c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2m-7-3c1.66 0 3 1.34 3 3H9c0-1.66 1.34-3 3-3m0 10c-2.76 0-5-2.24-5-5h2c0 1.66 1.34 3 3 3s3-1.34 3-3h2c0 2.76-2.24 5-5 5\"\n}), 'LocalMall');","import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box, Typography, TextField, InputAdornment, Button, Card, CardContent, \n  Avatar, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, \n  TablePagination, useTheme, Snackbar, Alert, LinearProgress, Grid, FormControl, \n  InputLabel, Select, MenuItem, Paper, Divider, Chip, Skeleton\n} from '@mui/material';\nimport {\n  CalendarToday as CalendarIcon,\n  DateRange as DateRangeIcon,\n  Assessment as AssessmentIcon, \n  Person as PersonIcon,\n  Store as StoreIcon,\n  Search as SearchIcon,\n  FileDownload as FileDownloadIcon,\n  FilterAlt as FilterIcon,\n  LocalMall as ProductIcon,\n  AttachMoney as MoneyIcon\n} from '@mui/icons-material';\nimport { collection, query, where, getDocs, orderBy, getDoc, doc, Timestamp } from 'firebase/firestore';\nimport { db } from '../../services/firebase';\nimport { useAuth } from '../../context/AuthContext';\nimport { getSubordinateIds, canViewStaffPerformanceReport } from '../../utils/roles';\nimport { useNavigate } from 'react-router-dom';\nimport { format, parseISO, isValid } from 'date-fns';\n\n// Helper function to format date\nconst formatDate = (timestamp) => {\n  if (!timestamp) return 'N/A';\n  \n  if (timestamp && typeof timestamp.toDate === 'function') {\n    return format(timestamp.toDate(), 'MMM d, yyyy');\n  }\n  \n  if (timestamp instanceof Date) {\n    return format(timestamp, 'MMM d, yyyy');\n  }\n  \n  try {\n    const date = new Date(timestamp);\n    if (isValid(date)) {\n      return format(date, 'MMM d, yyyy');\n    }\n  } catch (e) {\n    console.error(\"Error parsing date:\", e);\n  }\n  \n  return 'Invalid Date';\n};\n\nexport default function MarketingStaffPerformanceReport() {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { userProfile, allUsers, loading: authLoading } = useAuth();\n  \n  // State\n  const [loading, setLoading] = useState(false);\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [reportData, setReportData] = useState([]);\n  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  \n  // Summary statistics\n  const [totalVisits, setTotalVisits] = useState(0);\n  const [totalRetailers, setTotalRetailers] = useState(0);\n  const [totalProducts, setTotalProducts] = useState(0);\n  const [totalSalesAmount, setTotalSalesAmount] = useState(0);\n\n  // Initialize with current month date range\n  useEffect(() => {\n    const today = new Date();\n    const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n    const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    \n    setStartDate(firstDay.toISOString().split('T')[0]);\n    setEndDate(lastDay.toISOString().split('T')[0]);\n  }, []);\n\n  // Get accessible marketing staff based on user role\n  const accessibleStaff = useMemo(() => {\n    if (!userProfile || !allUsers) return [];\n    \n    // Make sure user has permission to view staff performance report\n    if (!canViewStaffPerformanceReport(userProfile)) {\n      return [];\n    }\n    \n    // Admin can see all marketing staff\n    if (userProfile.role === 'Admin') {\n      return allUsers.filter(u => u.role === 'MarketingStaff' && u.active);\n    }\n\n    // For other managers, get their subordinates\n    const myId = userProfile.id;\n    const subordinateIds = getSubordinateIds(myId, allUsers);\n    \n    // Filter for marketing staff among subordinates\n    return allUsers.filter(u => \n      u.role === 'MarketingStaff' && \n      u.active && \n      (subordinateIds.includes(u.id) || u.id === myId)\n    );\n  }, [userProfile, allUsers]);\n\n  // Auto-generate report after initialization\n  useEffect(() => {\n    if (startDate && endDate && !loading && allUsers?.length > 0) {\n      generateReport();\n    }\n  }, [startDate, endDate, allUsers]);\n\n  // Generate the consolidated report\n  const generateReport = async () => {\n    if (!startDate || !endDate) {\n      setSnackbar({\n        open: true,\n        message: 'Please select a date range',\n        severity: 'warning'\n      });\n      return;\n    }\n\n    setLoading(true);\n    \n    try {\n      // Create date range for query\n      const startTimestamp = new Date(startDate + 'T00:00:00');\n      const endTimestamp = new Date(endDate + 'T23:59:59');\n\n      // Get all marketing staff IDs based on role access\n      const staffIds = accessibleStaff.map(staff => staff.id);\n      \n      if (staffIds.length === 0) {\n        setReportData([]);\n        setSnackbar({\n          open: true,\n          message: 'No marketing staff found',\n          severity: 'info'\n        });\n        setLoading(false);\n        return;\n      }\n      \n      // Query all visits within date range\n      const visitsQuery = query(\n        collection(db, 'visits'),\n        where('checkInTime', '>=', startTimestamp),\n        where('checkInTime', '<=', endTimestamp),\n        orderBy('checkInTime', 'desc')\n      );\n      \n      const visitsSnapshot = await getDocs(visitsQuery);\n      let visitsData = visitsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      \n      // Filter for accessible staff\n      visitsData = visitsData.filter(visit => staffIds.includes(visit.userId));\n      \n      // Fetch inventory entries for accurate pricing \n      // Get all inventoryEntryIds from the visits\n      const inventoryEntryIds = new Set();\n      visitsData.forEach(visit => {\n        if (visit.inventoryEntryId) {\n          inventoryEntryIds.add(visit.inventoryEntryId);\n        }\n      });\n      \n      // Create a map of inventory entries\n      const inventoryEntriesMap = {};\n      if (inventoryEntryIds.size > 0) {\n        const inventoryPromises = Array.from(inventoryEntryIds).map(async (entryId) => {\n          try {\n            const entryDoc = await getDoc(doc(db, 'inventoryEntries', entryId));\n            if (entryDoc.exists()) {\n              inventoryEntriesMap[entryId] = entryDoc.data();\n            }\n          } catch (error) {\n            console.error(`Error fetching inventory entry ${entryId}:`, error);\n          }\n        });\n        \n        await Promise.all(inventoryPromises);\n      }\n      \n      // Fetch product rates for fallback pricing\n      const productRatesQuery = query(collection(db, 'productRates'));\n      const productRatesSnapshot = await getDocs(productRatesQuery);\n      const productRatesMap = {};\n      \n      productRatesSnapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.productId && data.rate) {\n          productRatesMap[data.productId] = parseFloat(data.rate);\n        }\n      });\n      \n      // Aggregate data by staff member\n      const staffPerformanceMap = {};\n      let totalVisitCount = 0;\n      let uniqueRetailersSet = new Set();\n      let productTotal = 0;\n      let salesAmountTotal = 0;\n      \n      // Initialize data structure for each staff\n      staffIds.forEach(staffId => {\n        staffPerformanceMap[staffId] = {\n          staffId,\n          staffName: allUsers.find(u => u.id === staffId)?.name || 'Unknown',\n          totalVisits: 0,\n          uniqueRetailers: new Set(),\n          totalProducts: 0,\n          totalSalesAmount: 0,\n          dealerName: '',\n          dealerId: ''\n        };\n        \n        // Get dealer assignment\n        const staffUser = allUsers.find(u => u.id === staffId);\n        if (staffUser && staffUser.assignedDealerId) {\n          staffPerformanceMap[staffId].dealerId = staffUser.assignedDealerId;\n        }\n      });\n      \n      // Process all visits data\n      for (const visit of visitsData) {\n        const staffId = visit.userId;\n        if (!staffPerformanceMap[staffId]) continue;\n        \n        // Count visit\n        staffPerformanceMap[staffId].totalVisits++;\n        totalVisitCount++;\n        \n        // Add retailer\n        staffPerformanceMap[staffId].uniqueRetailers.add(visit.retailerId);\n        uniqueRetailersSet.add(visit.retailerId);\n        \n        // Calculate products and amounts\n        if (Array.isArray(visit.products)) {\n          let visitProductCount = 0;\n          let visitSalesAmount = 0;\n          \n          for (const product of visit.products) {\n            const count = parseInt(product.count) || 0;\n            visitProductCount += count;\n            \n            // Try to find rate in different sources with priorities:\n            // 1. Product rate in the product itself\n            // 2. Rate from associated inventory entry\n            // 3. Latest product rate from productRates collection\n            let rate = null;\n            \n            // 1. Check product itself\n            if (product.rate) {\n              rate = parseFloat(product.rate);\n            } \n            // 2. Check inventory entry\n            else if (visit.inventoryEntryId && inventoryEntriesMap[visit.inventoryEntryId]) {\n              const inventoryEntry = inventoryEntriesMap[visit.inventoryEntryId];\n              const productEntry = inventoryEntry.productEntries?.find(pe => pe.productId === product.productId);\n              if (productEntry && productEntry.rate) {\n                rate = parseFloat(productEntry.rate);\n              }\n            }\n            // 3. Check global product rates\n            if (rate === null && productRatesMap[product.productId]) {\n              rate = productRatesMap[product.productId];\n            }\n            \n            // Calculate amount if we have a rate\n            if (rate !== null) {\n              visitSalesAmount += count * rate;\n            }\n          }\n          \n          staffPerformanceMap[staffId].totalProducts += visitProductCount;\n          staffPerformanceMap[staffId].totalSalesAmount += visitSalesAmount;\n          \n          productTotal += visitProductCount;\n          salesAmountTotal += visitSalesAmount;\n        }\n      }\n      \n      // Get dealer names for each staff\n      const dealerPromises = Object.values(staffPerformanceMap)\n        .filter(staff => staff.dealerId)\n        .map(async (staff) => {\n          try {\n            const dealerDoc = await getDoc(doc(db, 'dealers', staff.dealerId));\n            if (dealerDoc.exists()) {\n              staff.dealerName = dealerDoc.data().name || 'Unknown Dealer';\n            }\n          } catch (error) {\n            console.error(`Error fetching dealer for ${staff.staffName}:`, error);\n          }\n        });\n      \n      await Promise.all(dealerPromises);\n      \n      // Convert to array and calculate percentage metrics\n      const performanceArray = Object.values(staffPerformanceMap).map(staff => ({\n        ...staff,\n        uniqueRetailersCount: staff.uniqueRetailers.size,\n        visitPercentage: totalVisitCount ? ((staff.totalVisits / totalVisitCount) * 100).toFixed(1) : 0,\n        retailerPercentage: uniqueRetailersSet.size ? ((staff.uniqueRetailers.size / uniqueRetailersSet.size) * 100).toFixed(1) : 0,\n        productPercentage: productTotal ? ((staff.totalProducts / productTotal) * 100).toFixed(1) : 0,\n        salesPercentage: salesAmountTotal ? ((staff.totalSalesAmount / salesAmountTotal) * 100).toFixed(1) : 0\n      }));\n      \n      // Sort by total visits (descending)\n      performanceArray.sort((a, b) => b.totalVisits - a.totalVisits);\n      \n      // Update state\n      setReportData(performanceArray);\n      setTotalVisits(totalVisitCount);\n      setTotalRetailers(uniqueRetailersSet.size);\n      setTotalProducts(productTotal);\n      setTotalSalesAmount(salesAmountTotal);\n      \n      if (performanceArray.length === 0) {\n        setSnackbar({\n          open: true,\n          message: 'No performance data found for the selected period',\n          severity: 'info'\n        });\n      }\n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n      setSnackbar({\n        open: true,\n        message: 'Error generating report: ' + error.message,\n        severity: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filter data based on search term\n  const filteredData = useMemo(() => {\n    if (!searchTerm.trim()) return reportData;\n    \n    const searchLower = searchTerm.toLowerCase();\n    return reportData.filter(staff => \n      staff.staffName.toLowerCase().includes(searchLower) ||\n      staff.dealerName.toLowerCase().includes(searchLower)\n    );\n  }, [reportData, searchTerm]);\n\n  // Pagination handlers\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // Display rows with pagination\n  const displayedRows = filteredData.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage\n  );\n\n  // Export to CSV\n  const exportToCSV = () => {\n    if (reportData.length === 0) {\n      setSnackbar({\n        open: true,\n        message: 'No data to export',\n        severity: 'warning'\n      });\n      return;\n    }\n    \n    // Define headers\n    const headers = [\n      'Marketing Staff',\n      'Assigned Dealer',\n      'Total Visits',\n      'Retailers Reached',\n      'Products Sold',\n      'Sales Amount',\n      'Visit %',\n      'Retailer %',\n      'Product %',\n      'Sales %'\n    ];\n    \n    // Create rows\n    const rows = reportData.map(staff => [\n      staff.staffName,\n      staff.dealerName || 'Not Assigned',\n      staff.totalVisits,\n      staff.uniqueRetailersCount,\n      staff.totalProducts,\n      staff.totalSalesAmount.toFixed(2),\n      staff.visitPercentage + '%',\n      staff.retailerPercentage + '%',\n      staff.productPercentage + '%',\n      staff.salesPercentage + '%'\n    ]);\n    \n    // Create CSV content\n    let csvContent = headers.join(',') + '\\n';\n    rows.forEach(row => {\n      const processedRow = row.map(field => {\n        // Quote fields with commas\n        if (typeof field === 'string' && (field.includes(',') || field.includes('\"'))) {\n          return `\"${field.replace(/\"/g, '\"\"')}\"`;\n        }\n        return field;\n      });\n      csvContent += processedRow.join(',') + '\\n';\n    });\n    \n    // Add report title and date range\n    csvContent = `Marketing Staff Performance Report\\nDate Range: ${startDate} to ${endDate}\\n\\n` + csvContent;\n    \n    // Create and download the file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', `marketing_staff_performance_${startDate}_${endDate}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Add an access control check at the component level\n  if (!canViewStaffPerformanceReport(userProfile)) {\n    return (\n      <Box sx={{ p: 4, textAlign: 'center' }}>\n        <Typography variant=\"h6\" color=\"error\">\n          You are not authorized to view staff performance reports.\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      <Card sx={{ borderRadius: 2, boxShadow: theme.shadows[2], mb: 4 }}>\n        <CardContent sx={{ p: 3 }}>\n          {/* Header */}\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n            <Avatar\n              sx={{\n                bgcolor: theme.palette.warning.light,\n                color: theme.palette.warning.contrastText || '#fff',\n                width: 48,\n                height: 48,\n                mr: 2,\n              }}\n            >\n              <AssessmentIcon />\n            </Avatar>\n            <Box>\n              <Typography variant=\"h5\" fontWeight=\"bold\" color=\"text.primary\">\n                Marketing Staff Performance Report\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Consolidated performance metrics for marketing staff\n              </Typography>\n            </Box>\n          </Box>\n\n          {/* Filters */}\n          <Paper sx={{ p: 2, mb: 4, borderRadius: 2 }}>\n            <Grid container spacing={2} alignItems=\"center\">\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Search Staff or Dealer\"\n                  type=\"text\"\n                  size=\"small\"\n                  fullWidth\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <SearchIcon sx={{ color: theme.palette.warning.main }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\n                />\n              </Grid>\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"Start Date\"\n                  type=\"date\"\n                  size=\"small\"\n                  fullWidth\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <CalendarIcon sx={{ color: theme.palette.warning.main }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\n                />\n              </Grid>\n              <Grid item xs={12} md={3}>\n                <TextField\n                  label=\"End Date\"\n                  type=\"date\"\n                  size=\"small\"\n                  fullWidth\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  InputLabelProps={{ shrink: true }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <DateRangeIcon sx={{ color: theme.palette.warning.main }} />\n                      </InputAdornment>\n                    ),\n                  }}\n                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}\n                />\n              </Grid>\n              <Grid item xs={12} md={3}>\n                <Box sx={{ display: 'flex', gap: 1 }}>\n                  <Button\n                    variant=\"contained\"\n                    onClick={generateReport}\n                    disabled={loading}\n                    startIcon={<FilterIcon />}\n                    sx={{\n                      borderRadius: '2rem',\n                      bgcolor: theme.palette.warning.main,\n                      '&:hover': { bgcolor: theme.palette.warning.dark }\n                    }}\n                  >\n                    Apply Filters\n                  </Button>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={exportToCSV}\n                    disabled={loading || reportData.length === 0}\n                    startIcon={<FileDownloadIcon />}\n                    sx={{\n                      borderRadius: '2rem',\n                      borderColor: theme.palette.warning.main,\n                      color: theme.palette.warning.main,\n                      '&:hover': { borderColor: theme.palette.warning.dark }\n                    }}\n                  >\n                    Export CSV\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </Paper>\n\n          {/* Summary Cards */}\n          <Box sx={{ mb: 4 }}>\n            <Grid container spacing={3}>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.warning.light,\n                    color: theme.palette.warning.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    {totalVisits}\n                  </Typography>\n                  <Typography variant=\"body1\">Total Visits</Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.success.light,\n                    color: theme.palette.success.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    {totalRetailers}\n                  </Typography>\n                  <Typography variant=\"body1\">Retailers Reached</Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.info.light,\n                    color: theme.palette.info.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    {totalProducts}\n                  </Typography>\n                  <Typography variant=\"body1\">Products Sold</Typography>\n                </Paper>\n              </Grid>\n              <Grid item xs={12} sm={6} md={3}>\n                <Paper\n                  elevation={0}\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    bgcolor: theme.palette.primary.light,\n                    color: theme.palette.primary.contrastText,\n                    textAlign: 'center',\n                    height: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center'\n                  }}\n                >\n                  <Typography variant=\"h3\" sx={{ fontWeight: 700, mb: 1 }}>\n                    ₹{totalSalesAmount.toFixed(2)}\n                  </Typography>\n                  <Typography variant=\"body1\">Total Sales Amount</Typography>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Box>\n\n          {/* Results Table */}\n          {loading ? (\n            <Box sx={{ mb: 2 }}>\n              <LinearProgress />\n              {/* Skeleton placeholders for table */}\n              <TableContainer>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Marketing Staff</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold' }}>Assigned Dealer</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Total Visits</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Retailers Reached</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Products Sold</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'right' }}>Sales Amount</TableCell>\n                      <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Contribution %</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {[...Array(5)].map((_, i) => (\n                      <TableRow key={i}>\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <Skeleton variant=\"circular\" width={36} height={36} sx={{ mr: 1.5 }} />\n                            <Skeleton variant=\"text\" width={120} />\n                          </Box>\n                        </TableCell>\n                        <TableCell><Skeleton variant=\"text\" width={150} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"text\" width={60} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"text\" width={60} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"text\" width={60} /></TableCell>\n                        <TableCell align=\"right\"><Skeleton variant=\"text\" width={80} /></TableCell>\n                        <TableCell align=\"center\"><Skeleton variant=\"rounded\" width={60} height={24} /></TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          ) : reportData.length === 0 ? (\n            <Box sx={{ textAlign: 'center', p: 4, bgcolor: 'rgba(0,0,0,0.02)', borderRadius: 2 }}>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                No performance data found for the selected criteria\n              </Typography>\n            </Box>\n          ) : (\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ fontWeight: 'bold' }}>Marketing Staff</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold' }}>Assigned Dealer</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Total Visits</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Retailers Reached</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Products Sold</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'right' }}>Sales Amount</TableCell>\n                    <TableCell sx={{ fontWeight: 'bold', textAlign: 'center' }}>Contribution %</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {displayedRows.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} align=\"center\">\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          No matching results found\n                        </Typography>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    displayedRows.map((staff) => (\n                      <TableRow \n                        key={staff.staffId}\n                        sx={{ '&:hover': { bgcolor: 'rgba(0,0,0,0.04)' } }}\n                        onClick={() => navigate(`/sales/staff/${staff.staffId}/details`)}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <Avatar \n                              sx={{ \n                                width: 36, height: 36, mr: 1.5,\n                                bgcolor: theme.palette.warning.main \n                              }}\n                            >\n                              {staff.staffName?.charAt(0) || '?'}\n                            </Avatar>\n                            <Typography variant=\"body2\" fontWeight={500}>\n                              {staff.staffName}\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            {staff.dealerName ? (\n                              <>\n                                <StoreIcon sx={{ fontSize: 20, mr: 1, color: 'text.secondary' }} />\n                                <Typography variant=\"body2\">{staff.dealerName}</Typography>\n                              </>\n                            ) : (\n                              <Typography variant=\"body2\" color=\"text.secondary\">\n                                Not Assigned\n                              </Typography>\n                            )}\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                            <Typography variant=\"body2\" fontWeight={500}>\n                              {staff.totalVisits}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 0.5 }}>\n                              ({staff.visitPercentage}%)\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                            <Typography variant=\"body2\" fontWeight={500}>\n                              {staff.uniqueRetailersCount}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 0.5 }}>\n                              ({staff.retailerPercentage}%)\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                            <ProductIcon sx={{ color: theme.palette.info.main, fontSize: 18, mr: 0.5 }} />\n                            <Typography variant=\"body2\" fontWeight={500}>\n                              {staff.totalProducts}\n                            </Typography>\n                            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ ml: 0.5 }}>\n                              ({staff.productPercentage}%)\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"right\">\n                          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\n                            <MoneyIcon sx={{ color: theme.palette.success.main, fontSize: 18, mr: 0.5 }} />\n                            <Typography variant=\"body2\" fontWeight={500}>\n                              ₹{staff.totalSalesAmount.toFixed(2)}\n                            </Typography>\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          <Chip \n                            label={`${staff.salesPercentage}%`} \n                            color={parseFloat(staff.salesPercentage) > 15 ? \"success\" : \"default\"}\n                            size=\"small\"\n                            sx={{ \n                              borderRadius: '14px', \n                              fontWeight: 500,\n                              minWidth: '60px'\n                            }}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n              <TablePagination\n                rowsPerPageOptions={[10, 25, 50]}\n                component=\"div\"\n                count={filteredData.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </TableContainer>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Snackbar for notifications */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert \n          onClose={() => setSnackbar({ ...snackbar, open: false })} \n          severity={snackbar.severity}\n          sx={{ width: '100%' }}\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n} "],"names":["createSvgIcon","_jsx","d","MarketingStaffPerformanceReport","theme","useTheme","navigate","useNavigate","userProfile","allUsers","loading","authLoading","useAuth","setLoading","useState","startDate","setStartDate","endDate","setEndDate","searchTerm","setSearchTerm","reportData","setReportData","snackbar","setSnackbar","open","message","severity","page","setPage","rowsPerPage","setRowsPerPage","totalVisits","setTotalVisits","totalRetailers","setTotalRetailers","totalProducts","setTotalProducts","totalSalesAmount","setTotalSalesAmount","useEffect","today","Date","firstDay","getFullYear","getMonth","lastDay","toISOString","split","accessibleStaff","useMemo","canViewStaffPerformanceReport","role","filter","u","active","myId","id","subordinateIds","getSubordinateIds","includes","length","generateReport","async","startTimestamp","endTimestamp","staffIds","map","staff","visitsQuery","query","collection","db","where","orderBy","visitsData","getDocs","docs","doc","data","visit","userId","inventoryEntryIds","Set","forEach","inventoryEntryId","add","inventoryEntriesMap","size","inventoryPromises","Array","from","entryDoc","getDoc","entryId","exists","error","console","Promise","all","productRatesQuery","productRatesSnapshot","productRatesMap","productId","rate","parseFloat","staffPerformanceMap","totalVisitCount","uniqueRetailersSet","productTotal","salesAmountTotal","staffId","_allUsers$find","staffName","find","name","uniqueRetailers","dealerName","dealerId","staffUser","assignedDealerId","retailerId","isArray","products","visitProductCount","visitSalesAmount","product","count","parseInt","_inventoryEntry$produ","productEntry","productEntries","pe","dealerPromises","Object","values","dealerDoc","performanceArray","uniqueRetailersCount","visitPercentage","toFixed","retailerPercentage","productPercentage","salesPercentage","sort","a","b","filteredData","trim","searchLower","toLowerCase","displayedRows","slice","_jsxs","Box","children","Card","sx","borderRadius","boxShadow","shadows","mb","CardContent","p","display","alignItems","Avatar","bgcolor","palette","warning","light","color","contrastText","width","height","mr","AssessmentIcon","Typography","variant","fontWeight","Paper","Grid","container","spacing","item","xs","md","TextField","label","type","fullWidth","value","onChange","e","target","InputProps","startAdornment","InputAdornment","position","SearchIcon","main","InputLabelProps","shrink","CalendarIcon","DateRangeIcon","gap","Button","onClick","disabled","startIcon","FilterIcon","dark","exportToCSV","rows","csvContent","join","row","processedRow","field","replace","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","FileDownloadIcon","borderColor","sm","elevation","textAlign","flexDirection","justifyContent","success","info","primary","LinearProgress","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","_","i","Skeleton","align","colSpan","_staff$staffName","style","cursor","charAt","_Fragment","StoreIcon","fontSize","ml","ProductIcon","MoneyIcon","Chip","minWidth","TablePagination","rowsPerPageOptions","component","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}